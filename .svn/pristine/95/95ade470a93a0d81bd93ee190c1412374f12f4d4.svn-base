//===================================================
//Desarrollado Por		    : Andres Castellanos
//Fecha de Creación		    : 15/Julio/2013
//Lenguaje Programación	    : [C#]
//Producto o sistema	    : SOLUCION SOFTPHONE
//Empresa			        : Axede S.A
//Cliente			        : Axede S.A
//===================================================
//Versión	Descripción
//[1.0.0.0]
//Formulario Principal que contiene las funcionalidades graficas y llamado al core del negocio del softphone
//===================================================
//MODIFICACIONES:
//===================================================
//Ver.	 Fecha		Autor – Empresa 	Descripción

//XX	dd/mm/aaaa	[Nombre Completo]	 [Razón del cambio realizado] 
//===================================================
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using Axede.Utilidades;
using Axede.WPF.Softphone.Applications.BussinesClass.Configuracion;
using Axede.WPF.Softphone.Applications.BussinesClass.Enum;
using Axede.WPF.Softphone.Applications.GUI.User_Controls;
using Axede.WPF.Softphone.Applications.PortSIP_Class;
using Axede.WPF.Softphone.Applications.UtilControls;
using Axede.WPF.Softphone.Applications.UtilControls.ModalMessageBox;
using Axede.WPF.Softphone.Applications.UtilControls.PopUp;

namespace Axede.WPF.Softphone.Applications.GUI.Principal
{
    /// <summary>
    /// Interaction logic for SoftphoneWPF.xaml
    /// </summary>
    /// <summary>
    /// Interaction logic for Window1.xaml
    /// </summary>
    public partial class SoftphoneWPF : Window, SIPCallbackEvents
    {

        #region Propiedades

        private ClassMethodUtil _classutil;
        public ClassMethodUtil Classutil
        {
            get { return _classutil; }
            set { _classutil = value; }
        }
        private List<ConfiguracionVideoconferencia> _ListSalasConferencia;
        public List<ConfiguracionVideoconferencia> ListSalasConferencia
        {
            get { return _ListSalasConferencia; }
            set { _ListSalasConferencia = value; }
        }

            private const int MAX_LINES = 9; // Maximo de lineas
            private const int LINE_BASE = 1; // Linea por defecto
            private bool _banMute = false; //Bandera para saber si el dispositivo esta en mute            
            private bool _BanLlamadaRespuesta = false; //Bandera para saber si el boton toma la opcion de respuesta o de llamar

            private int _sessionId;
            public int SessionId // Id de la sesion que se esta manejando actualmente
            {
                get { return _sessionId; }
                set
                {
                    _sessionId = value;
                }
            }

            private ControlVideo _popcontrol;
            public ControlVideo Popcontrol // Usercontrol que almacena el video local y remoto
            {
                get { return _popcontrol;
                }
                set { _popcontrol = value; }
            }

            private Session[] _CallSessions = new Session[MAX_LINES]; //Clase para definir sesiones

            private bool _SIPInited = false; //Bandera que valida si hay una sesion inicializada
            private bool _SIPLogined = false; //Bandera que valida si esta logueado
            private int _CurrentlyLine = LINE_BASE; // Linea actual

            private PortSIPCore _core; //Clase core que utiliza por medio de interfaz los metodos de la dll PortSIPCore;
        #endregion    

        /// <summary>
        /// Recoge la accion de los botones para enviar tonos y pintar en la pantalla
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        #region Llamado Hijos Botonera
            void Botonera_PropertyChanged(object sender, PropertyChangedEventArgs e)
            {
                bool banCaracterEspecial = false;
                if (sender is Botonera__UC)
                {
                    if (Botonera.AccionBoton == BotoneraEnum.ASTERISCO)
                    {
                        textBlockDialingNumber.Text = textBlockDialingNumber.Text + "*";
                        _core.sendDtmf(_CallSessions[_CurrentlyLine].getSessionId(), '*');
                        banCaracterEspecial = true;
                    }
                    else if (Botonera.AccionBoton == BotoneraEnum.NUMERAL)
                    {                        
                        textBlockDialingNumber.Text = textBlockDialingNumber.Text + "#";
                        _core.sendDtmf(_CallSessions[_CurrentlyLine].getSessionId(), '#');
                        banCaracterEspecial = true;
                    }
                    else { textBlockDialingNumber.Text = textBlockDialingNumber.Text + (int)Botonera.AccionBoton; }
                    if (_SIPInited == true && _CallSessions[_CurrentlyLine].getSessionState() == true)
                    {
                        if (!banCaracterEspecial)
                        {
                            _core.sendDtmf(_CallSessions[_CurrentlyLine].getSessionId(), Convert.ToChar((((int)Botonera.AccionBoton).ToString())));
                        }
                        banCaracterEspecial = false;
                    }
                }
            }
        #endregion

        /// <summary>
        /// Metodo Conectar y Desconectar, si el usuario ya se ha identificado no solicita credenciales nuevamente
        /// </summary>
        /// <param name="UserName" >Usuario de identificacion</param>
        /// <param name="Clave">Clave del usuario de identificacion</param>
        /// <param name="Alias">Nombre Usuario</param>
        /// <param name="SIP_Server">Sip Server</param>
        /// <param name="Port">Puerto Sip Server</param>
        #region Autenticacion

           public void Conectar(string UserName, string Clave, string Alias, string SIP_Server, string Port)
        {
            if (_SIPInited == true)
            {
                MessageBox.Show("You are already logged in.");
                return;
            }
            if (string.IsNullOrEmpty(Alias))
            {
                textBlockIdentifier.Text = UserName;
            }
            if (UserName.Length <= 0)
            {
                MessageBox.Show("The user name does not allows empty.");
                return;
            }


            //if (Clave.Length <= 0)
            //{
            //    MessageBox.Show("The password does not allows empty.");
            //    return;
            //}

            if (SIP_Server.Length <= 0)
            {
                MessageBox.Show("The SIP server does not allows empty.");
                return;
            }


            int SIPServerPort = 0;
            if (Port.Length > 0)
            {
                SIPServerPort = int.Parse(Port);
                if (SIPServerPort > 65535 || SIPServerPort <= 0)
                {
                    MessageBox.Show("The SIP server port is out of range.");

                    return;
                }
            }


            int StunServerPort = 0;
            //if (TextBoxStunPort.Text.Length > 0)
            //{
            //    StunServerPort = int.Parse(TextBoxStunPort.Text);
            //    if (StunServerPort > 65535 || StunServerPort <= 0)
            //    {
            //        MessageBox.Show("The Stun server port is out of range.");

            //        return;
            //    }
            //}


            TRANSPORT_TYPE transport = TRANSPORT_TYPE.TRANSPORT_UDP;
            //switch (ComboBoxTransport.SelectedIndex)
            //{
            //    case 0:
            //        transport = TRANSPORT_TYPE.TRANSPORT_UDP;
            //        break;

            //    case 1:

            //        transport = TRANSPORT_TYPE.TRANSPORT_TLS;
            //        break;

            //    case 2:
            //        transport = TRANSPORT_TYPE.TRANSPORT_TCP;
            //        break;
            //}



            //
            // Create the class instance of PortSIP SDK wrapper 
            //

            _core = new PortSIPCore(0, this);

            //
            // Create and set the SIP callback handers, this MUST called before
            // _core.initialize();
            //
            _core.createCallbackHandlers();

            string logFilePath = "d:\\"; // The log file path, you can change it - the folder MUST exists
            string agent = "PortSIP VoIP SDK 7.0";
            string stunServer = string.Empty;
            int errorCode = 0;



            // Initialize the SDK
            Boolean state = _core.initialize(transport,
                             PORTSIP_LOG_LEVEL.PORTSIP_LOG_NONE,
                             logFilePath,
                             MAX_LINES,
                             agent,
                             stunServer,
                             StunServerPort,
                             false,
                             false,
                             out errorCode);

            if (state == false)
            {
                _core.shutdownCallbackHandlers();
                _core.releaseCallbackHandlers();
                MessageBox.Show("initialize failed.");
                return;
            }


            _SIPInited = true;

            loadDevices();

            string userName = UserName;
            string password = Clave;
            string userDomain = string.Empty;
            string SIPServer = SIP_Server;
            string displayName = Alias;
            string authName = string.Empty;


            int outboundServerPort = 0;
            string outboundServer = "";

            _core.setAudioCodecParameter(AUDIOCODEC_TYPE.AUDIOCODEC_AMRWB, "mode-set=0; octet-align=0; robust-sorting=0");

            Random rd = new Random();
            int LocalSIPPort = rd.Next(1000, 5000) + 4000; // Generate the random port for SIP

            StringBuilder localIP = new StringBuilder();
            localIP.Length = 64;
            int rt = _core.getLocalIP(0, localIP, 64);
            if (rt != 0)
            {
                _core.shutdownCallbackHandlers();
                _core.unInitialize();
                _core.releaseCallbackHandlers();

                _SIPInited = false;

                MessageBox.Show("getLocalIP failed.");
                return;
            }


            // Set the SIP user information
            rt = _core.setUserInfo(userName,
                                       displayName,
                                       authName,
                                       password,
                                       localIP.ToString(),
                                       LocalSIPPort,
                                       userDomain,
                                       SIPServer,
                                       SIPServerPort,
                                       outboundServer,
                                       outboundServerPort);
            if (rt != 0)
            {
                _core.shutdownCallbackHandlers();
                _core.unInitialize();
                _core.releaseCallbackHandlers();

                _SIPInited = false;

                MessageBox.Show("setUserInfo failed.");
                return;
            }


            SetSRTPType();

            string licenseKey = "NTRGNkY1QUM1MERFOUQzNzUyMDhBMEM5NzhEOUVFNzRAOEUxQzM4QTU1QUQ2RUQ2NDFCRjc2Mzk4NDYyNDAxQzlAMkQ5MDFCMjc5MDQ0OEUxOUQ2QTJCNjkyMjZBNzZCMkNAQjg2RTQzNENGNzlENEU3OEYzRjQ2NEU1NTZCQ0M3RjA.";
            _core.setLicenseKey(licenseKey);



            //_core.setLocalVideoWindow(localVideoWindow.Child.Handle);


            SetVideoResolution();
            SetVideoQuality();

            UpdateAudioCodecs();
            UpdateVideoCodecs();

            InitSettings();


            rt = _core.registerServer(90);
            if (rt != 0)
            {
                _SIPInited = false;

                _core.shutdownCallbackHandlers();
                _core.unInitialize();

                _core.releaseCallbackHandlers();

                // ListBoxSIPLog.Items.Clear();

                MessageBox.Show("register to server failed.");
            }
            else
            {
                textBlockCallStateInfo.Text = "Conectado";
                textBlockRegStatus.Text = "Online";
                textBlockIdentifier.Text = Alias;
            }

            // ListBoxSIPLog.Items.Add("Registering...");
        }

           private void deRegisterFromServer()
           {
               if (_SIPInited == false)
               {
                   return;
               }



               for (int i = LINE_BASE; i < MAX_LINES; ++i)
               {
                   if (_CallSessions[i].getRecvCallState() == true)
                   {
                       string reason = " Ocupado";
                       _core.rejectCall(_CallSessions[i].getSessionId(), 486, reason);
                   }
                   else if (_CallSessions[i].getSessionState() == true)
                   {
                       _core.terminateCall(_CallSessions[i].getSessionId());
                   }

                   _CallSessions[i].reset();
               }

               if (_SIPLogined == true)
               {
                   _core.unRegisterServer();
                   _SIPLogined = false;
               }


               if (_SIPInited == true)
               {
                   //
                   // MUST called before _core.unInitliaze();
                   //
                   _core.shutdownCallbackHandlers();

                   _core.unInitialize();

                   //
                   // MUST called after _core.unInitliaze();
                   //
                   _core.releaseCallbackHandlers();


                   _SIPInited = false;
               }




               //   ComboBoxLines.SelectedIndex = 0;
               _CurrentlyLine = LINE_BASE;


               //ComboBoxSpeakers.Items.Clear();
               //ComboBoxMicrophones.Items.Clear();
               //ComboBoxCameras.Items.Clear();

           }

        #endregion

        /// <summary>
        /// Botones que ejecutan las acciones principales en el softphone. LLamar, Colgar, Mensaje, Video
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        #region Botones Principales

            private void BtnColgar_Click(object sender, RoutedEventArgs e)
            {
                _BanLlamadaRespuesta = false;
                BtnLlamar.ToolTip = "Llamar";
                if (_SIPInited == false || _SIPLogined == false)
                {
                    return;
                }
                textBlockDialingNumber.Text = string.Empty;
                if (_CallSessions[_CurrentlyLine].getRecvCallState() == true)
                {
                    string reason = "Ocupado";
                    _core.rejectCall(_CallSessions[_CurrentlyLine].getSessionId(), 486, reason);
                    _CallSessions[_CurrentlyLine].reset();

                    textBlockCallStateInfo.Text = "Llamada Rechazada";
                    //   ListBoxSIPLog.Items.Add(Text);

                    return;
                }

                if (_CallSessions[_CurrentlyLine].getSessionState() == true)
                {
                    _core.terminateCall(_CallSessions[_CurrentlyLine].getSessionId());
                    _CallSessions[_CurrentlyLine].reset();


                    textBlockCallStateInfo.Text = "Colgado";
                    //  ListBoxSIPLog.Items.Add(Text);
                }
            }

            private void BtnMensaje_Click(object sender, RoutedEventArgs e)
            {

            }

            private void BtnLlamar_Click(object sender, RoutedEventArgs e)
            {
                Llamar();
            }

            private void BtnVideo_Click(object sender, RoutedEventArgs e)
            {
                //if (_PopUpVideo != null)
                //{
                //    _PopUpVideo = null;
                //}
                Point poi = new Point();
                poi.X = this.RestoreBounds.X;
                poi.Y = this.RestoreBounds.Y;
                //_PopUpVideo = new PopUpControl();
                //if (_PopUpVideo != null)
                //{
                //    _PopUpVideo.Placement = System.Windows.Controls.Primitives.PlacementMode.Left;
                //    _PopUpVideo.PlacementTarget = this;
                //    _PopUpVideo.AreAnimationsEnabled = true;
                //    _PopUpVideo.IsOpen = true;
                //}
            
                //Validar el numero de instancias a crear
                if (Popcontrol == null)
                {
                    Popcontrol = new ControlVideo(poi, ref _core);
                    // Popcontrol.Close();
                   // Popcontrol.UpdatePosition(poi);
                    Popcontrol._SIPinited = _SIPInited;
                    Popcontrol._CallSessionsG = _CallSessions;
                    Popcontrol._CurrentlyLineG = _CurrentlyLine;
                    Popcontrol._sessionId = SessionId;
                    if (SessionId > 0)
                    {
                        Popcontrol.SetVideoRemote(SessionId);
                    }

                    //Valida si la opcion de videoconferencia esta activa
                    VIDEO_RESOLUTION videoResolution = VIDEO_RESOLUTION.VIDEO_CIF;
                    if (CheckBoxConf.IsChecked == true)
                    {
                        //-3001 codigo que identifica si el control de video aun no esta inicializado por disposicion del usuario 
                        int rt = -3001;
                        if (Popcontrol != null)
                        {
                            rt = Popcontrol.createConference(videoResolution, false);
                        }
                        if (rt == 0)
                        {
                            textBlockCallStateInfo.Text = "Conexión a conferencia satisfactoria";
                            for (int i = LINE_BASE; i < MAX_LINES; ++i)
                            {
                                if (_CallSessions[i].getSessionState() == true)
                                {
                                    joinConference(i);
                                }
                            }
                        }
                        else if (rt == -3001)
                        {
                            textBlockCallStateInfo.Text = "Conexión a conferencia satisfactoria";
                        }
                        else
                        {
                            textBlockCallStateInfo.Text = "Fallo de Conexión a conferencia";
                            CheckBoxConf.IsChecked = false;
                        }
                    }
                    //  UpdatePosition();

                    Popcontrol.DragMove();
                    //Popcontrol.UpdatePosition();
                    _core.viewLocalVideo(true);
                    Popcontrol.Show();
                }
                else {                  
                    Popcontrol.Visibility = Visibility.Visible;
                    Popcontrol.WindowState = WindowState.Normal;
                }
            }

            private void Llamar()
            {

                if (!_BanLlamadaRespuesta)
                {
                    if (_SIPInited == false || _SIPLogined == false)
                    {
                        return;
                    }
                    if (textBlockDialingNumber.Text.Length <= 0)
                    {
                        MessageBoxModal.Show(Classutil.ResolveOwnerWindow(), "El telefono esta vacio.", "Informacion", MessageBoxButton.OK, MessageBoxImage.Warning, MessageBoxResult.Cancel, true);
                        
                        return;
                    }

                    if (_CallSessions[_CurrentlyLine].getSessionState() == true || _CallSessions[_CurrentlyLine].getRecvCallState() == true)
                    {
                        MessageBox.Show("Línea actual está ocupada, por favor, cambie de línea.");
                        return;
                    }


                    string callTo = textBlockDialingNumber.Text;

                    UpdateAudioCodecs();
                    UpdateVideoCodecs();

                    if (_core.isAudioCodecEmpty() == true)
                    {
                        InitDefaultAudioCodecs();
                    }



                    //  Usually for 3PCC need to make call without SDP

                    Boolean hasSdp = true;
                    //if (CheckBoxSDP.IsChecked == true)
                    //{
                    //    hasSdp = false;
                    //}

                    _core.setAudioDeviceId(ComboBoxMicrophones.SelectedIndex, ComboBoxSpeakers.SelectedIndex);

                    int errorCode = 0;
                    SessionId = _core.call(callTo, hasSdp, out errorCode);
                    //if (errorCode != 0)
                    //{
                    //    ListBoxSIPLog.Items.Add("Call failed");
                    //    return;
                    //}

                    if (Popcontrol != null)
                    {
                        Popcontrol.SetVideoRemote(SessionId);
                    }

                    _CallSessions[_CurrentlyLine].setSessionId(SessionId);
                    _CallSessions[_CurrentlyLine].setSessionState(true);

                    string Text;
                    Text = "Llamando...";
                    textBlockCallStateInfo.Text = Text;
                }
                else
                {
                    if (_SIPInited == false || _SIPLogined == false)
                    {
                        return;
                    }

                    if (_CallSessions[_CurrentlyLine].getRecvCallState() == false)
                    {
                        MessageBoxModal.Show(Classutil.ResolveOwnerWindow(), "La línea actual no tiene una llamada entrante, por favor cambiar de línea", "Informacion", MessageBoxButton.OK, MessageBoxImage.Warning, MessageBoxResult.Cancel, true);                       
                        return;
                    }

                    _CallSessions[_CurrentlyLine].setRecvCallState(false);
                    _CallSessions[_CurrentlyLine].setSessionState(true);

                    int ses = _CallSessions[_CurrentlyLine].getSessionId();
                    SessionId = ses;

                    if (Popcontrol != null)
                    {
                        Popcontrol.SetVideoRemote(ses);
                    }

                    int rt = _core.answerCall(_CallSessions[_CurrentlyLine].getSessionId());
                    if (rt == 0)
                    {
                        string Text;
                        Text = "Llamada Establecida";
                        textBlockCallStateInfo.Text = Text;
                        joinConference(_CurrentlyLine);
                    }
                    else
                    {
                        _CallSessions[_CurrentlyLine].reset();

                        string Text;
                        Text = "Fallo Responder Llamada";
                        textBlockCallStateInfo.Text = Text;
                    }

                }
            }

        #endregion

        #region Constructor
           public SoftphoneWPF()
        {
            InitializeComponent();
            ListSalasConferencia = new List<ConfiguracionVideoconferencia>();
            Classutil = new ClassMethodUtil();
            BtnLlamar.ToolTip = "Llamar";
            Botonera.PropertyChanged += Botonera_PropertyChanged;
            ConfiguracionVideoconferencia Video = null;
            SeccionVideoConferencia seccion = ConfigurationManager.GetSection("videoconferencias") as SeccionVideoConferencia;
            if (null != seccion)
            {
                if (seccion.videoconferenciasConfiguradas.Count > 0)
                {
                    Video = seccion.videoconferenciasConfiguradas[0];
                    if (Video != null)
                    {
                        ListSalasConferencia.Add(Video);  
                    }
                }
            }
            grvVideoConferencia.ItemsSource = ListSalasConferencia;
        }
        #endregion       

        /// <summary>
        /// Configuracion y actualizacion de los codecs de video y Audio
        /// </summary>
        #region Configuracion Codecs

            private void UpdateAudioCodecs()
            {
                if (_SIPInited == false)
                {
                    return;
                }

                _core.clearAudioCodec();

                if (checkBoxPCMU.IsChecked == true)
                {
                    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_PCMU);
                }


                if (checkBoxPCMA.IsChecked == true)
                {
                    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_PCMA);
                }


                if (checkBoxG729.IsChecked == true)
                {
                    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_G729);
                }

                if (checkBoxILBC.IsChecked == true)
                {
                    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_ILBC);
                }


                if (checkBoxGSM.IsChecked == true)
                {
                    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_GSM);
                }


                if (checkBoxAMR.IsChecked == true)
                {
                    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_AMR);
                }

                if (CheckBoxG722.IsChecked == true)
                {
                    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_G722);
                }

                if (CheckBoxSpeex.IsChecked == true)
                {
                    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_SPEEX);
                }

                if (CheckBoxAMRwb.IsChecked == true)
                {
                    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_AMRWB);
                }

                if (CheckBoxSpeexWB.IsChecked == true)
                {
                    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_SPEEXWB);
                }

                if (CheckBoxG7221.IsChecked == true)
                {
                    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_G7221);
                }

                _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_DTMF);

            }

            private void UpdateVideoCodecs()
            {
                if (_SIPInited == false)
                {
                    return;
                }

                _core.clearVideoCodec();

                if (checkBoxH263.IsChecked == true)
                {
                    _core.addVideoCodec(VIDEOCODEC_TYPE.VIDEOCODEC_H263);
                }

                if (checkBoxH2631998.IsChecked == true)
                {
                    _core.addVideoCodec(VIDEOCODEC_TYPE.VIDEOCODEC_H263_1998);
                }

                if (checkBoxH264.IsChecked == true)
                {
                    _core.addVideoCodec(VIDEOCODEC_TYPE.VIDEOCODEC_H264);
                }

                if (checkBoxVP8.IsChecked == true)
                {
                    _core.addVideoCodec(VIDEOCODEC_TYPE.VIDEOCODEC_VP8);
                }

            }

            //Codecs Audio

            private void checkBoxPCMU_CheckedChanged(object sender, RoutedEventArgs e)
            {
                UpdateAudioCodecs();
            }

            private void checkBoxPCMA_CheckedChanged(object sender, RoutedEventArgs e)
            {
                UpdateAudioCodecs();
            }

            private void checkBoxG729_CheckedChanged(object sender, RoutedEventArgs e)
            {
                UpdateAudioCodecs();
            }

            private void checkBoxILBC_CheckedChanged(object sender, RoutedEventArgs e)
            {
                UpdateAudioCodecs();
            }

            private void checkBoxAMR_CheckedChanged(object sender, RoutedEventArgs e)
            {
                UpdateAudioCodecs();
            }

            private void CheckBoxG722_CheckedChanged(object sender, RoutedEventArgs e)
            {
                UpdateAudioCodecs();
            }

            private void CheckBoxSpeex_CheckedChanged(object sender, RoutedEventArgs e)
            {
                UpdateAudioCodecs();
            }

            private void CheckBoxG7221_CheckedChanged(object sender, RoutedEventArgs e)
            {
                UpdateAudioCodecs();
            }

            private void checkBoxGSM_CheckedChanged(object sender, RoutedEventArgs e)
            {
                UpdateAudioCodecs();
            }

            //Codecs Video

            private void checkBoxH2631998_CheckedChanged(object sender, RoutedEventArgs e)
            {
                UpdateVideoCodecs();
            }

            private void checkBoxH263_CheckedChanged(object sender, RoutedEventArgs e)
            {
                UpdateVideoCodecs();
            }

            private void checkBoxH264_CheckedChanged(object sender, RoutedEventArgs e)
            {
                UpdateVideoCodecs();
            }

            private void checkBoxVP8_CheckedChanged(object sender, RoutedEventArgs e)
            {
                UpdateVideoCodecs();
            }

            private void CheckBoxAMRwb_CheckedChanged(object sender, RoutedEventArgs e)
            {
                UpdateVideoCodecs();
            }

            private void CheckBoxSpeexWB_CheckedChanged(object sender, RoutedEventArgs e)
            {
                UpdateVideoCodecs();
            }

        #endregion

        /// <summary>
        /// Slider de Microfono y speakers asi como validacion de silencio
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        #region Volumen

            private void sliderSpeaker_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
            {
                if (_SIPInited == false)
                {
                    return;
                }

                _core.setSpeakerVolume((Int32)e.NewValue);
            }

            private void sliderMicrophone_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
            {
                if (_SIPInited == false)
                {
                    return;
                }

                _core.setMicVolume((Int32)e.NewValue);
            }

            private void BtnMute_Click(object sender, RoutedEventArgs e)
            {
                if (_SIPInited == false || _SIPLogined == false)
                {
                    return;
                }

                if (_banMute == true)
                {
                    _core.muteMicrophone(true);
                    ImgMicro.Source = new BitmapImage(new Uri("pack://application:,,,/Axede.WPF.Softphone.Applications;component/Themes/Images/MicrofonoVerde.png"));
                    _banMute = false;
                }
                else
                {
                    _core.muteMicrophone(false);
                    ImgMicro.Source = new BitmapImage(new Uri("pack://application:,,,/Axede.WPF.Softphone.Applications;component/Themes/Images/MicrofonoRojo.png"));
                    _banMute = true;
                }
            }

        #endregion

        #region TAB Contactos

            private void grvContactos_Loaded(object sender, RoutedEventArgs e)
            {

            }

            private void grvContactos_Sorting(object sender, DataGridSortingEventArgs e)
            {

            }

            private void CheckBox_Unchecked(object sender, RoutedEventArgs e)
            {

            }

            private void CheckBox_Checked(object sender, RoutedEventArgs e)
            {

            }

            private void MyCheckBox_Checked(object sender, RoutedEventArgs e)
            {

            }

            private void MyCheckBox_Unchecked(object sender, RoutedEventArgs e)
            {

            }

        #endregion

        #region TAB VideoConferencia

            private void CheckBoxConf_Click(object sender, RoutedEventArgs e)
            {
                if (_SIPInited == false || _SIPLogined == false)
                {
                    CheckBoxConf.IsChecked = false;
                    return;
                }

                VIDEO_RESOLUTION videoResolution = VIDEO_RESOLUTION.VIDEO_CIF;

                //TODO: Andres Castellanos
                //Validacion deshabilitada y dejada por defecto CIF por el consumo de recursos en el RMX
                //switch (ComboBoxVideoResolution.SelectedIndex)
                //{
                //    case 0:
                //        videoResolution = VIDEO_RESOLUTION.VIDEO_QCIF;
                //        break;
                //    case 1:
                //        videoResolution = VIDEO_RESOLUTION.VIDEO_CIF;
                //        break;
                //    case 2:
                //        videoResolution = VIDEO_RESOLUTION.VIDEO_VGA;
                //        break;
                //    case 3:
                //        videoResolution = VIDEO_RESOLUTION.VIDEO_SVGA;
                //        break;
                //    case 4:
                //        videoResolution = VIDEO_RESOLUTION.VIDEO_XVGA;
                //        break;
                //    case 5:
                //        videoResolution = VIDEO_RESOLUTION.VIDEO_720P;
                //        break;
                //}


                if (CheckBoxConf.IsChecked == true)
                {
                    //-3001 codigo que identifica si el control de video aun no esta inicializado por disposicion del usuario 
                    int rt = -3001;
                    if (Popcontrol != null)
                    {
                        rt = Popcontrol.createConference(videoResolution, false);
                    }
                    if (rt == 0)
                    {
                        textBlockCallStateInfo.Text = "Conexión a conferencia satisfactoria";
                        for (int i = LINE_BASE; i < MAX_LINES; ++i)
                        {
                            if (_CallSessions[i].getSessionState() == true)
                            {
                                joinConference(i);
                            }
                        }
                    }
                    else if (rt == -3001)
                    {

                    }
                    else
                    {
                        textBlockCallStateInfo.Text = "Fallo de Conexión a conferencia";
                        CheckBoxConf.IsChecked = false;
                    }
                }
                else
                {
                    // Stop conference

                    // Before stop the conference, MUST place all lines to hold state

                    int[] sessionIds = new int[9] { 0, 0, 0, 0, 0, 0, 0, 0, 0 };


                    for (int i = LINE_BASE; i < MAX_LINES; ++i)
                    {
                        if (_CallSessions[i].getSessionState() == true && _CallSessions[i].getHoldState() == false)
                        {

                            sessionIds[i] = _CallSessions[i].getSessionId();

                            // Hold it 
                            _core.hold(sessionIds[i]);
                            _CallSessions[i].setHoldState(true);
                        }
                    }

                    _core.destroyConference();
                    textBlockCallStateInfo.Text = "Liberar de Conferencia";

                }
            }

            private void joinConference(Int32 index)
            {
                if (_SIPInited == false)
                {
                    return;
                }
                if (CheckBoxConf.IsChecked == false)
                {
                    return;
                }

                _core.joinToConference(_CallSessions[index].getSessionId());

                _CallSessions[index].setHoldState(false);
            }

            private void grvVideoConferencia_Sorting(object sender, DataGridSortingEventArgs e)
            {

            }

            private void grvVideoConferencia_Loaded(object sender, RoutedEventArgs e)
            {

            }

            private void BtnCrearSala_Click(object sender, RoutedEventArgs e)
            {

            }

            private void BtnEliminarSala_Click(object sender, RoutedEventArgs e)
            {

            }

            private void LlamarSala_Click(object sender, RoutedEventArgs e)
            {
                ConfiguracionVideoconferencia Seleccionado = grvVideoConferencia.SelectedItem as ConfiguracionVideoconferencia;
                textBlockDialingNumber.Text = string.Empty;
                switch (Seleccionado.TipoLlamada)
                {
                    case (int)TipoLlamadaEnum.Extension:
                        textBlockDialingNumber.Text = Seleccionado.NumeroMarcar;
                        break;
                    case (int)TipoLlamadaEnum.IP:
                        textBlockDialingNumber.Text = "sip:@" + Seleccionado.NumeroMarcar;
                        break;
                    case (int)TipoLlamadaEnum.URL:
                        textBlockDialingNumber.Text = Seleccionado.NumeroMarcar;
                        break;
                    default:
                        break;
                }
                Llamar();
            }

        #endregion

        /// <summary>
        /// Carga los dispositivos que esten conectados en el sistema y cambia funcionalidades dependiendo de lo que el usuario utilice
        /// </summary>
        #region TAB Configuracion

            private void loadDevices()
            {
                if (_SIPInited == false)
                {
                    return;
                }

                int num = _core.getNumOfPlayoutDevices();
                for (int i = 0; i < num; ++i)
                {
                    StringBuilder deviceName = new StringBuilder();
                    deviceName.Length = 256;

                    if (_core.getPlayoutDeviceName(i, deviceName, 256) == 0)
                    {
                        ComboBoxSpeakers.Items.Add(deviceName.ToString());
                    }

                    ComboBoxSpeakers.SelectedIndex = 0;
                }


                num = _core.getNumOfRecordingDevices();
                for (int i = 0; i < num; ++i)
                {
                    StringBuilder deviceName = new StringBuilder();
                    deviceName.Length = 256;

                    if (_core.getRecordingDeviceName(i, deviceName, 256) == 0)
                    {
                        ComboBoxMicrophones.Items.Add(deviceName.ToString());
                    }

                    ComboBoxMicrophones.SelectedIndex = 0;
                }


                num = _core.getNumOfVideoCaptureDevices();
                for (int i = 0; i < num; ++i)
                {
                    StringBuilder uniqueId = new StringBuilder();
                    uniqueId.Length = 256;
                    StringBuilder deviceName = new StringBuilder();
                    deviceName.Length = 256;

                    if (_core.getVideoCaptureDeviceName(i, uniqueId, 256, deviceName, 256) == 0)
                    {
                        ComboBoxCameras.Items.Add(deviceName.ToString());
                    }

                    ComboBoxCameras.SelectedIndex = 0;
                }


                int volume = _core.getSpeakerVolume();
                sliderSpeaker.Value = volume;

                volume = _core.getMicVolume();
                sliderMicrophone.Value = volume;

            }

            private void ComboBoxSpeakers_SelectionChanged(object sender, SelectionChangedEventArgs e)
            {
                if (_SIPInited == true)
                {
                    _core.setAudioDeviceId(ComboBoxMicrophones.SelectedIndex, ComboBoxSpeakers.SelectedIndex);
                }
            }

            private void ComboBoxMicrophones_SelectionChanged(object sender, SelectionChangedEventArgs e)
            {
                if (_SIPInited == true)
                {
                    _core.setAudioDeviceId(ComboBoxMicrophones.SelectedIndex, ComboBoxSpeakers.SelectedIndex);
                }
            }

            private void ComboBoxCameras_SelectionChanged(object sender, SelectionChangedEventArgs e)
            {
                if (_SIPInited)
                {
                    _core.setVideoDeviceId(ComboBoxCameras.SelectedIndex);
                }
            }

            private void ComboBoxSRTP_SelectionChanged(object sender, SelectionChangedEventArgs e)
            {
                SetSRTPType();
            }

        #endregion

        /// <summary>
        /// Eventos del window principal, opciones de drag inicializacion y cerrado, posisionamiento de la ventana
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        #region Eventos Window

            private void Window_Loaded(object sender, RoutedEventArgs e)
            {
                //  MessageBox.Show("This sample was built base on evaluation PortSIP VoIP SDK, which allows only three minutes conversation. The conversation will be cut off automatically after three minutes, then you can't hearing anything. Feel free contact us at: sales@portsip.com to purchase the official version.", "Information");


                // Create the call sessions array, the PortSIP VoIP SDK allows maximum 100 lines,
                // but we just use 8 lines with this sample, we need a class to save the call sessions information

                int i = 0;
                sliderSpeaker.Value = 0;
                sliderMicrophone.Value = 0;
                for (i = 0; i < MAX_LINES; ++i)
                {
                    _CallSessions[i] = new Session();
                    _CallSessions[i].reset();
                }

                _SIPInited = false;
                _SIPLogined = false;
                _CurrentlyLine = LINE_BASE;

                ComboBoxLines.Items.Add("Linea 1");
                ComboBoxLines.Items.Add("Linea 2");
                ComboBoxLines.Items.Add("Linea 3");
                ComboBoxLines.Items.Add("Linea 4");
                ComboBoxLines.Items.Add("Linea 5");
                ComboBoxLines.Items.Add("Linea 6");
                ComboBoxLines.Items.Add("Linea 7");
                ComboBoxLines.Items.Add("Linea 8");

                ComboBoxLines.SelectedIndex = 0;

            }

            private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
            {
                deRegisterFromServer();
            }

            private void Window_MouseDown(object sender, MouseButtonEventArgs e)
            {
                try
                {
                    DragMove();
                }
                catch (Exception ex)
                {
                    
                   // throw ex;
                }
                
            }

            private void UpdatePosition()
            {
                this.Left = this.Left + this.ActualWidth;
                this.Top = this.Top;
            }

            private void _this_LocationChanged(object sender, EventArgs e)
            {
                Point poi = new Point();
                if (Popcontrol != null)
                {
                    poi.X = this.RestoreBounds.X;
                    poi.Y = this.RestoreBounds.Y;
                    Popcontrol.UpdatePosition(poi);
                }
            }

            private void tc_SelectionChanged(object sender, SelectionChangedEventArgs e)
            {

            }

        #endregion

        /// <summary>
        /// Opciones del menu, Cerrar, Ayuda, y Acerca de SOFTPHONE AXEDE
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        #region Menu

            private void HelpMenuItem_Click(object sender, RoutedEventArgs e)
            {

            }

            private void AboutMenuItem_Click(object sender, RoutedEventArgs e)
            {

            }

            private void ExitMenuItem_Click(object sender, RoutedEventArgs e)
            {
                if (_SIPInited == false)
                {
                    return;
                }

                deRegisterFromServer();
                App.Current.Shutdown();
            }

        #endregion

        /// <summary>
        /// Inicializacion de codecs resoluciones y validaciones de configuracion por defecto
        /// </summary>
        #region Resolucion Valores Defecto

            private void InitSettings()
            {
                if (_SIPInited == false)
                {
                    return;
                }

                _core.enableDTMFOfRFC2833(101); // Use DTMF as RTP event - RFC2833
                _core.setDtmfSamples(160);

                //      _core.enableDtmfOfInfo(); // Use DTMF as SIP INFO method

                //if (checkBoxAEC.IsChecked == true)
                //{
                _core.enableAEC(true);
                //}
                //else
                //{
                //    _core.enableAEC(false);
                //}

                //if (checkBoxVAD.IsChecked == true)
                //{
                //    _core.enableVAD(true);
                //}
                //else
                //{
                _core.enableVAD(false);
                //  }

                //if (checkBoxCNG.IsChecked == true)
                //{
                //    _core.enableCNG(true);
                //}
                //else
                //{
                _core.enableCNG(false);
                //  }

                //if (checkBoxAGC.IsChecked == true)
                //{
                //    _core.enableAGC(true);
                //}
                //else
                //{
                _core.enableAGC(false);
                //  }
            }

            private void InitDefaultAudioCodecs()
            {
                if (_SIPInited == false)
                {
                    return;
                }


                _core.clearAudioCodec();

                // Default we just using PCMU, PCMA, G729
                _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_PCMU);
                _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_PCMA);
                _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_G729);

                _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_DTMF);  // for DTMF as RTP Event - RFC2833
            }

            private void SetSRTPType()
            {
                if (_SIPInited == false)
                {
                    return;
                }

                SRTP_POLICY SRTPPolicy = SRTP_POLICY.SRTP_POLICY_NONE;

                //switch (ComboBoxSRTP.SelectedIndex)
                //{
                //    case 0:
                //        SRTPPolicy = SRTP_POLICY.SRTP_POLICY_NONE;
                //        break;

                //    case 1:
                //        SRTPPolicy = SRTP_POLICY.SRTP_POLICY_PREFER;
                //        break;

                //    case 2:
                //        SRTPPolicy = SRTP_POLICY.SRTP_POLICY_FORCE;
                //        break;
                //}

                _core.setSrtpPolicy(SRTPPolicy);
            }

            private void SetVideoResolution()
            {
                if (_SIPInited == false)
                {
                    return;
                }

                VIDEO_RESOLUTION videoResolution = VIDEO_RESOLUTION.VIDEO_CIF;

                //switch (ComboBoxVideoResolution.SelectedIndex)
                //{
                //    case 0:
                //        videoResolution = VIDEO_RESOLUTION.VIDEO_QCIF;
                //        break;
                //    case 1:
                //        videoResolution = VIDEO_RESOLUTION.VIDEO_CIF;
                //        break;
                //    case 2:
                //        videoResolution = VIDEO_RESOLUTION.VIDEO_VGA;
                //        break;
                //    case 3:
                //        videoResolution = VIDEO_RESOLUTION.VIDEO_SVGA;
                //        break;
                //    case 4:
                //        videoResolution = VIDEO_RESOLUTION.VIDEO_XVGA;
                //        break;
                //    case 5:
                //        videoResolution = VIDEO_RESOLUTION.VIDEO_720P;
                //        break;
                //    case 6:
                //        videoResolution = VIDEO_RESOLUTION.VIDEO_QVGA;
                //        break;
                //}

                _core.setVideoResolution(videoResolution);
            }

            private void SetVideoQuality()
            {
                if (_SIPInited == false)
                {
                    return;
                }

                //    _core.setVideoBitrate((Int32)sliderVideoQualityLevel.Value);
            }

        #endregion        
        
        /// <summary>
        /// Llamada en espera, Conferencia
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        #region Configuracion General Llamadas           

            private void CheckBoxLlamadaEspera_Click(object sender, RoutedEventArgs e)
            {
                if (CheckBoxLlamadaEspera.IsChecked.Value)
                {
                    if (_SIPInited == false || _SIPLogined == false)
                    {
                        return;
                    }

                    if (_CallSessions[_CurrentlyLine].getSessionState() == false)
                    {
                        return;
                    }


                    if (_CallSessions[_CurrentlyLine].getHoldState() == true)
                    {
                        return;
                    }


                    string Text;


                    int rt = _core.hold(_CallSessions[_CurrentlyLine].getSessionId());
                    if (rt != 0)
                    {
                        Text = "Linea " + _CurrentlyLine.ToString();
                        Text = Text + ": Fallo en Espera";
                        textBlockCallStateInfo.Text = Text;

                        return;
                    }


                    _CallSessions[_CurrentlyLine].setHoldState(true);

                    Text = "Linea " + _CurrentlyLine.ToString();
                    Text = Text + ": En Espera";
                    textBlockCallStateInfo.Text = Text;
                }
                else
                {
                    if (_SIPInited == false || _SIPLogined == false)
                    {
                        return;
                    }

                    if (_CallSessions[_CurrentlyLine].getSessionState() == false)
                    {
                        return;
                    }


                    if (_CallSessions[_CurrentlyLine].getHoldState() == false)
                    {
                        return;
                    }


                    string Text;
                    int rt = _core.unHold(_CallSessions[_CurrentlyLine].getSessionId());
                    if (rt != 0)
                    {
                        _CallSessions[_CurrentlyLine].setHoldState(false);

                        Text = "Linea " + _CurrentlyLine.ToString();
                        Text = Text + ": Fallo Llamada Recuperada.";
                        textBlockCallStateInfo.Text = Text;

                        return;
                    }

                    _CallSessions[_CurrentlyLine].setHoldState(false);

                    Text = "Line " + _CurrentlyLine.ToString();
                    Text = Text + ": Llamada Recuperada";
                    textBlockCallStateInfo.Text = Text;
                }
            }

            private void ComboBoxLines_SelectedIndexChanged(object sender, EventArgs e)
            {
                if (_SIPInited == false || _SIPLogined == false)
                {
                    ComboBoxLines.SelectedIndex = 0;
                    return;
                }

                if (_CurrentlyLine == (ComboBoxLines.SelectedIndex + LINE_BASE))
                {
                    return;
                }

                if (CheckBoxConf.IsChecked == true)
                {
                    _CurrentlyLine = ComboBoxLines.SelectedIndex + LINE_BASE;
                    return;
                }

                // To switch the line, must hold currently line first
                if (_CallSessions[_CurrentlyLine].getSessionState() == true && _CallSessions[_CurrentlyLine].getHoldState() == false)
                {
                    _core.hold(_CallSessions[_CurrentlyLine].getSessionId());
                    _CallSessions[_CurrentlyLine].setHoldState(true);

                    string Text = "Linea " + _CurrentlyLine.ToString();
                    Text = Text + ": Espera";
                    textBlockCallStateInfo.Text = Text;
                }



                _CurrentlyLine = ComboBoxLines.SelectedIndex + LINE_BASE;


                // If target line was in hold state, then un-hold it
                if (_CallSessions[_CurrentlyLine].getSessionState() == true && _CallSessions[_CurrentlyLine].getHoldState() == true)
                {
                    _core.unHold(_CallSessions[_CurrentlyLine].getSessionId());
                    _CallSessions[_CurrentlyLine].setHoldState(false);

                    string Text = "Linea " + _CurrentlyLine.ToString();
                    Text = Text + ": Recuperada - Llamada Establecida";
                    textBlockCallStateInfo.Text = Text;
                }
            }

        #endregion

        /// <summary>
        /// Inicializacion y llamado a los metodos del core
        /// </summary>
        #region Metodos CORE
            public Int32 onRegisterSuccess(Int32 callbackObject, Int32 statusCode, String statusText)
            {
                // use the Invoke method to modify the control.

                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = "Registro Exitoso";
                }));

                _SIPLogined = true;


                return 0;
            }


            public Int32 onRegisterFailure(Int32 callbackObject, Int32 statusCode, String statusText)
            {
                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = "Fallo al Registrarse";
                }));


                _SIPLogined = false;

                return 0;
            }


            public Int32 onInviteIncoming(Int32 callbackObject,
                                              Int32 sessionId,
                                              String caller,
                                              String callerDisplayName,
                                              String callee,
                                              String calleeDisplayName,
                                              String audioCodecName,
                                              String videoCodecName,
                                              Boolean hasVideo)
            {

                int i = 0;
                _BanLlamadaRespuesta = true;
                BtnLlamar.Dispatcher.Invoke(new Action(delegate
                {
                     BtnLlamar.ToolTip = "Contestar";
                }));
               
                bool state = false;
                string Text = string.Empty;

                if (hasVideo == true)
                {
                    // This incoming call has video SDP
                }
                else
                {
                    // This incoming call hasn't the video SDP
                }

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionState() == false && _CallSessions[i].getRecvCallState() == false)
                    {
                        state = true;
                        _CallSessions[i].setRecvCallState(true);
                        break;
                    }
                }

                if (state == false)
                {
                    string reason = "Ocupado";
                    _core.rejectCall(sessionId, 486, reason);

                    return 0;
                }


                // For DND(Do not disturb
                Boolean DND = false;
                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    if (CheckBoxDND.IsChecked == true)
                    {
                        DND = true;
                    }
                }));


                if (DND == true)
                {
                    string reason = "Ocupado";
                    _core.rejectCall(sessionId, 486, reason);
                    _CallSessions[i].reset();

                    Text = "Linea " + i.ToString();
                    Text = Text + ": Llamada Rechazada por DND";


                    textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                    {
                        textBlockCallStateInfo.Text = Text;
                    }));


                    return 0;
                }

                _CallSessions[i].setSessionId(sessionId);

                bool needIgnoreAutoAnswer = false;
                int j = 0;

                for (j = LINE_BASE; j < MAX_LINES; ++j)
                {
                    if (_CallSessions[j].getSessionState() == true)
                    {
                        needIgnoreAutoAnswer = true;
                        break;
                    }
                }


                Boolean AA = false;

                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    if (CheckBoxAA.IsChecked == true)
                    {
                        AA = true;
                    }
                }));

                if (needIgnoreAutoAnswer == false && AA == true)
                {
                    _CallSessions[i].setRecvCallState(false);
                    _CallSessions[i].setSessionState(true);
                    
                    textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                    {
                        if (CheckBoxAA.IsChecked == true)
                        {
                            if (_popcontrol != null)
                            {
                                _popcontrol.SetVideoRemote(_CallSessions[i].getSessionId());
                            }
                             _core.answerCall(_CallSessions[i].getSessionId());
                        }
                    }));



                    Text = "Linea " + i.ToString();
                    Text = Text + ": Llamada Contestada por Auto Respuesta";


                    textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                    {
                        textBlockCallStateInfo.Text = Text;
                    }));

                    return 0;
                }



                Text = "Llamada entrante de";
                Text = Text + callerDisplayName;
                Text = Text + "<";
                Text = Text + caller;
                Text = Text + ">";


                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = Text;
                }));


                //  You should write your own code to play the wav file here for alert the incoming call(incoming tone);

                return 0;

            }

            public Int32 onInviteTrying(Int32 callbackObject, Int32 sessionId, String caller, String callee)
            {
                int i = 0;
                bool state = false;

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }


                string Text = "Llamada Saliente...";

                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = Text;
                }));

                return 0;

            }

            public Int32 onInviteRinging(Int32 callbackObject,
                                                Int32 sessionId,
                                                Boolean hasEarlyMedia,
                                                Boolean hasVideo,
                                                String audioCodecName,
                                                String videoCodecName)
            {

                int i = 0;
                bool state = false;

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }

                if (hasEarlyMedia == false)
                {
                    // Hasn't the early media, you must play the local WAVE  file for ringing tone
                    // play the wav file for ring tone
                }

                string Text = "Llamando...";

                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = Text;
                }));


                return 0;
            }


            public Int32 onInviteAnswered(Int32 callbackObject,
                                                 Int32 sessionId,
                                                 Boolean hasVideo,
                                                 Int32 statusCode,
                                                 String statusText,
                                                 String audioCodecName,
                                                 String videoCodecName)
            {

                if (hasVideo == true)
                {
                    // This incoming call has video SDP
                }
                else
                {
                    // This incoming call hasn't the video SDP
                }


                int i = 0;
                bool state = false;

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }


                _CallSessions[i].setSessionState(true);


                string Text = "Llamada Establecida";

                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = Text;
                    joinConference(i);
                }));
                //    



                return 0;
            }


            public Int32 onInviteFailure(Int32 callbackObject, Int32 sessionId, Int32 statusCode, String statusText)
            {

                int i = 0;
                bool state = false;

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }

                _CallSessions[i].reset();



                string Text = "Llamada Fallo";
                Text = Text + statusText;

                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = Text;
                }));



                //  the error reason is statusText
                //  the error code is statusCode

                return 0;
            }


            public Int32 onInviteClosed(Int32 callbackObject, Int32 sessionId)
            {

                int i = 0;
                _BanLlamadaRespuesta = false;
                bool state = false;

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }


                _CallSessions[i].reset();


                string Text = "Colgado";


                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = Text;
                }));


                return 0;
            }



            public Int32 onInviteUpdated(Int32 callbackObject,
                                                Int32 sessionId,
                                                Boolean hasVideo,
                                                String audioCodecName,
                                                String videoCodecName
                                                )
            {


                int i = 0;
                bool state = false;

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }

                string Text = "Linea " + i.ToString();
                Text = Text + ": Llamada Actualizada";


                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = Text;
                }));

                return 0;

            }


            public Int32 onInviteUASConnected(Int32 callbackObject, Int32 sessionId, Int32 statusCode, String statusText)
            {

                return 0;
            }


            public Int32 onInviteUACConnected(Int32 callbackObject, Int32 sessionId, Int32 statusCode, String statusText)
            {

                return 0;
            }


            public Int32 onInviteBeginingForward(Int32 callbackObject, String forwardingTo)
            {

                string Text = "Llamada enviada a: ";
                Text = Text + forwardingTo;

                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = Text;
                }));


                return 0;
            }



            public Int32 onRemoteHold(Int32 callbackObject, Int32 sessionId)
            {

                int i = 0;
                bool state = false;

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }

                string Text = "Linea " + i.ToString();
                Text = Text + ": Espera Remota";


                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = Text;
                }));

                return 0;
            }


            public Int32 onRemoteUnHold(Int32 callbackObject, Int32 sessionId)
            {

                int i = 0;
                bool state = false;

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }

                string Text = "Linea " + i.ToString();
                Text = Text + ": Recuperar Espera REmota";

                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = Text;
                }));

                return 0;
            }


            public Int32 onTransferTrying(Int32 callbackObject, Int32 sessionId, String referTo)
            {

                int i = 0;
                bool state = false;

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }


                // for example, if A and B is established call, A transfer B to C, the transfer is trying,
                // B will got this transferTring event, and use referTo to know C ( C is "referTo" in this case)

                string Text = "Linea " + i.ToString();
                Text = Text + ": Tratando de Transferir";

                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = Text;
                }));


                return 0;
            }

            public Int32 onTransferRinging(Int32 callbackObject, Int32 sessionId, Boolean hasVideo)
            {

                int i = 0;
                bool state = false;

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }

                string Text = "Linea " + i.ToString();
                Text = Text + ": Esperando Respuesta Transferencia";

                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = Text;
                }));


                // Use hasVideo to check does this transfer call has video.
                // if hasVideo is true, then it's have video, if hasVideo is false, means has no video.


                return 0;
            }


            public Int32 onPASVTransferSuccess(Int32 callbackObject, Int32 sessionId, Boolean hasVideo)
            {

                int i = 0;
                bool state = false;

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }



                string Text = "Linea " + i.ToString();
                textBlockCallStateInfo.Text = Text + ": Transferencia Exitosa";

                //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
                //{
                //    _core.setRemoteVideoWindow(sessionId, remoteVideoWindow.Child.Handle);
                //    ListBoxSIPLog.Items.Add(Text);
                //}));

                return 0;
            }

            public Int32 onPASVTransferFailure(Int32 callbackObject, Int32 sessionId, Int32 statusCode, String statusText)
            {
                int i = 0;
                bool state = false;

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }


                //  statusText is error reason
                //  statusCode is error code

                string Text = "Linea " + i.ToString();
                textBlockCallStateInfo.Text = Text + ": Fallo al Transferir";

                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = Text;
                }));

                return 0;
            }



            public Int32 onACTVTransferSuccess(Int32 callbackObject, Int32 sessionId)
            {

                int i = 0;
                bool state = false;

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }


                string Text = "Linea " + i.ToString();
                Text = Text + ": Transferencia Exitosa, Colgado";

                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = Text;
                }));


                // The ACTIVE Transfer success, then reset currently call.
                _CallSessions[i].reset();

                return 0;
            }

            public Int32 onACTVTransferFailure(Int32 callbackObject, Int32 sessionId, Int32 statusCode, String statusText)
            {
                int i = 0;
                bool state = false;

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }


                string Text = "Linea " + i.ToString();
                Text = Text + ": Fallo al transferir";

                textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                {
                    textBlockCallStateInfo.Text = Text;
                }));


                //  statusText is error reason
                //  statusCode is error code

                return 0;
            }




            public Int32 onRecvPagerMessage(Int32 callbackObject, String from, String fromDisplayName, StringBuilder message)
            {

                string Text = "Received SIP pager message from ";
                Text += from;
                Text += " :";
                Text += message.ToString();

                MessageBoxModal.Show(Classutil.ResolveOwnerWindow(), Text, "Informacion", MessageBoxButton.OK, MessageBoxImage.Warning, MessageBoxResult.Cancel, true);                       
              
                return 0;
            }

            public Int32 onSendPagerMessageSuccess(Int32 callbackObject,
                                                          String caller,
                                                          String callerDisplayName,
                                                          String callee,
                                                          String calleeDisplayName
                                                         )
            {


                return 0;
            }



            public Int32 onSendPagerMessageFailure(Int32 callbackObject,
                                                           String caller,
                                                          String callerDisplayName,
                                                          String callee,
                                                          String calleeDisplayName,
                                                          Int32 statusCode,
                                                          String statusText
                                                         )
            {
                return 0;
            }






            public Int32 onArrivedSignaling(Int32 callbackObject, Int32 sessionId, StringBuilder signaling)
            {
                // This event will be fired when the SDK received a SIP message
                // you can use signaling to access the SIP message.

                return 0;
            }

            public Int32 onSentSignaling(Int32 callbackObject, StringBuilder signaling)
            {
                // This event will be fired when the SDK sent a SIP message
                // you can use signaling to access the SIP message.

                return 0;
            }


            public Int32 onWaitingVoiceMessage(Int32 callbackObject,
                                                      String messageAccount,
                                                      Int32 urgentNewMessageCount,
                                                      Int32 urgentOldMessageCount,
                                                      Int32 newMessageCount,
                                                      Int32 oldMessageCount)
            {

                string Text = messageAccount;
                Text += " has voice message.";


                //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
                //{
                //    ListBoxSIPLog.Items.Add(Text);
                //}));

                // You can use these parameters to check the voice message count

                //  urgentNewMessageCount;
                //  urgentOldMessageCount;
                //  newMessageCount;
                //  oldMessageCount;

                return 0;
            }


            public Int32 onWaitingFaxMessage(Int32 callbackObject,
                                                      String messageAccount,
                                                      Int32 urgentNewMessageCount,
                                                      Int32 urgentOldMessageCount,
                                                      Int32 newMessageCount,
                                                      Int32 oldMessageCount)
            {
                string Text = messageAccount;
                Text += " has FAX message.";


                //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
                //{
                //    ListBoxSIPLog.Items.Add(Text);
                //}));



                // You can use these parameters to check the FAX message count

                //  urgentNewMessageCount;
                //  urgentOldMessageCount;
                //  newMessageCount;
                //  oldMessageCount;



                return 0;
            }


            public Int32 onRecvDtmfTone(Int32 callbackObject, Int32 sessionId, Int32 tone)
            {

                int i = 0;
                bool state = false;

                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }


                string DTMFTone = tone.ToString();
                if (DTMFTone == "10")
                {
                    DTMFTone = "*";
                }
                else if (DTMFTone == "11")
                {
                    DTMFTone = "#";
                }

                string Text = "Received DTMF Tone: ";
                Text += DTMFTone;
                Text += " on line ";
                Text += i.ToString();

                //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
                //{
                //    ListBoxSIPLog.Items.Add(Text);
                //}));


                return 0;
            }


            public Int32 onPresenceRecvSubscribe(Int32 callbackObject,
                                                        Int32 subscribeId,
                                                        String from,
                                                        String fromDisplayName,
                                                        String subject)
            {


                return 0;
            }


            public Int32 onPresenceOnline(Int32 callbackObject, String from, String fromDisplayName, String stateText)
            {

                return 0;
            }

            public Int32 onPresenceOffline(Int32 callbackObject, String from, String fromDisplayName)
            {


                return 0;
            }

            public Int32 onRecvOptions(Int32 callbackObject, StringBuilder optionsMessage)
            {
                /*
                            string text = "Received an OPTIONS message: ";
                            text += optionsMessage.ToString();
                            MessageBox.Show(text);
                */


                return 0;
            }

            public Int32 onRecvInfo(Int32 callbackObject, Int32 sessionId, StringBuilder infoMessage)
            {
                /*          
                          int i = 0;
                          bool state = false;
                          for (i = LINE_BASE; i < MAX_LINES; ++i)
                          {
                              if (_CallSessions[i].getSessionId() == sessionId)
                              {
                                  state = true;
                                  break;
                              }
                          }

                          if (state == false)
                          {
                              return 0;
                          }


                          string text = "Received a INFO message on line ";
                          text += i.ToString();
                          text += ": ";
                          text += infoMessage.ToString();

                          MessageBox.Show(text);
                  */

                return 0;
            }


            public Int32 onRecvMessage(Int32 callbackObject, Int32 sessionId, StringBuilder message)
            {
                /*          
                          int i = 0;
                          bool state = false;
                          for (i = LINE_BASE; i < MAX_LINES; ++i)
                          {
                              if (_CallSessions[i].getSessionId() == sessionId)
                              {
                                  state = true;
                                  break;
                              }
                          }

                          if (state == false)
                          {
                              return 0;
                          }


                          string text = "Received a MESSAGE message on line ";
                          text += i.ToString();
                          text += ": ";
                          text += message.ToString();

                          MessageBox.Show(text);
                  */

                return 0;
            }



            public Int32 onRecvBinaryMessage(Int32 callbackObject,
                                            Int32 sessionId,
                                            StringBuilder message,
                                            byte[] messageBody,
                                            Int32 length)
            {

                int i = 0;
                bool state = false;
                for (i = LINE_BASE; i < MAX_LINES; ++i)
                {
                    if (_CallSessions[i].getSessionId() == sessionId)
                    {
                        state = true;
                        break;
                    }
                }

                if (state == false)
                {
                    return 0;
                }


                string text = "Received a binary MESSAGE message on line ";
                text += i.ToString();


                MessageBox.Show(text, "Received a binary MESSAGE message");

                return 0;
            }


            public Int32 onRecvBinaryPagerMessage(Int32 callbackObject,
                                                  StringBuilder from,
                                                  StringBuilder fromDisplayName,
                                                  byte[] messageBody,
                                                  Int32 length)
            {
                string text = "Received a binary pager message(out of dialog) from ";
                text += from;

                MessageBox.Show(text, "Received a binary pager MESSAGE message");

                return 0;
            }



            public Int32 onReceivedRtpPacket(IntPtr callbackObject,
                                      Int32 sessionId,
                                      Boolean isAudio,
                                      byte[] RTPPacket,
                                      Int32 packetSize)
            {
                /*
        !!! IMPORTANT !!!

        Don’t call any PortSIP SDK API functions in here directly. If you want to call the PortSIP API functions or 
        other code which will spend long time, you should post a message to main thread(main window) or other thread,
        let the thread to call SDK API functions or other code.

    */

                return 0;
            }

            public Int32 onSendingRtpPacket(IntPtr callbackObject,
                                      Int32 sessionId,
                                      Boolean isAudio,
                                      byte[] RTPPacket,
                                      Int32 packetSize)
            {

                /*
        !!! IMPORTANT !!!

        Don’t call any PortSIP SDK API functions in here directly. If you want to call the PortSIP API functions or 
        other code which will spend long time, you should post a message to main thread(main window) or other thread,
        let the thread to call SDK API functions or other code.
            
    */

                return 0;
            }



            public Int32 onAudioRawCallback(IntPtr callbackObject,
                                               Int32 sessionId,
                                               Int32 callbackType,
                                               [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 4)] byte[] data,
                                               Int32 dataLength,
                                               Int32 samplingFreqHz)
            {


                /*
                    !!! IMPORTANT !!!

                    Don’t call any PortSIP SDK API functions in here directly. If you want to call the PortSIP API functions or 
                    other code which will spend long time, you should post a message to main thread(main window) or other thread,
                    let the thread to call SDK API functions or other code.

                */

                // The data parameter is audio stream as PCM format, 16bit, Mono.
                // the dataLength parameter is audio steam data length.




                //
                // IMPORTANT: the data length is stored in dataLength parameter!!!
                //

                AUDIOSTREAM_CALLBACK_MODE type = (AUDIOSTREAM_CALLBACK_MODE)callbackType;

                if (type == AUDIOSTREAM_CALLBACK_MODE.AUDIOSTREAM_LOCAL_MIX)
                {
                    // The callback data is mixed from local record device - microphone
                    // The sessionId is CALLBACK_SESSION_ID.PORTSIP_LOCAL_MIX_ID

                }
                else if (type == AUDIOSTREAM_CALLBACK_MODE.AUDIOSTREAM_REMOTE_MIX)
                {
                    // The callback data is mixed from local record device - microphone
                    // The sessionId is CALLBACK_SESSION_ID.PORTSIP_REMOTE_MIX_ID
                }
                else if (type == AUDIOSTREAM_CALLBACK_MODE.AUDIOSTREAM_LOCAL_PER_CHANNEL)
                {
                    // The callback data is from local record device of each session, use the sessionId to identifying the session.
                }
                else if (type == AUDIOSTREAM_CALLBACK_MODE.AUDIOSTREAM_REMOTE_PER_CHANNEL)
                {
                    // The callback data is received from remote side of each session, use the sessionId to identifying the session.
                }




                return 0;
            }

            public Int32 onVideoRawCallback(IntPtr callbackObject,
                                                    Int32 sessionId,
                                                    Int32 callbackType,
                                                    Int32 width,
                                                    Int32 height,
                                                    [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 6)] byte[] data,
                                                    Int32 dataLength)
            {
                /*
                    !!! IMPORTANT !!!

                    Don’t call any PortSIP SDK API functions in here directly. If you want to call the PortSIP API functions or 
                    other code which will spend long time, you should post a message to main thread(main window) or other thread,
                    let the thread to call SDK API functions or other code.

                    The video data format is YUV420.
                */



                //
                // IMPORTANT: the data length is stored in dataLength parameter!!!
                //



                VIDEOSTREAM_CALLBACK_MODE type = (VIDEOSTREAM_CALLBACK_MODE)callbackType;

                if (type == VIDEOSTREAM_CALLBACK_MODE.VIDEOSTREAM_LOCAL)
                {

                }

                else if (type == VIDEOSTREAM_CALLBACK_MODE.VIDEOSTREAM_REMOTE)
                {

                }


                return 0;

            }


            public Int32 onPlayAviFileFinished(IntPtr callbackObject, Int32 sessionId)
            {
                // when the file is play finished, this callback event will be fired.

                /*
                    !!! IMPORTANT !!!

                    Don’t call any PortSIP SDK API functions in here directly. If you want to call the PortSIP API functions or 
                    other code which will spend long time, you should post a message to main thread(main window) or other thread,
                    let the thread to call SDK API functions or other code.

                */


                return 0;
            }


            public Int32 onPlayWaveFileFinished(IntPtr callbackObject, Int32 sessionId, String fileName)
            {
                // when the file is play finished, this callback event will be fired.

                /*
                    !!! IMPORTANT !!!

                    Don’t call any PortSIP SDK API functions in here directly. If you want to call the PortSIP API functions or 
                    other code which will spend long time, you should post a message to main thread(main window) or other thread,
                    let the thread to call SDK API functions or other code.

                */


                return 0;
            }
            #endregion

        private void ButtonReject_Click(object sender, RoutedEventArgs e)
        {
            if (_SIPInited == false || _SIPLogined == false)
            {
                return;
            }

            if (_CallSessions[_CurrentlyLine].getRecvCallState() == true)
            {
                string reason = "Ocupado";
                _core.rejectCall(_CallSessions[_CurrentlyLine].getSessionId(), 486, reason);
                _CallSessions[_CurrentlyLine].reset();

                string Text = "Linea " + _CurrentlyLine.ToString();
                textBlockCallStateInfo.Text = Text + "Llamada Rechazada";
             //   ListBoxSIPLog.Items.Add(Text);

                return;
            }
        }

        private void ButtonTransfer_Click(object sender, RoutedEventArgs e)
        {
            if (_SIPInited == false || _SIPLogined == false)
            {
                return;
            }

            if (_CallSessions[_CurrentlyLine].getSessionState() == false)
            {
                MessageBoxModal.Show(Classutil.ResolveOwnerWindow(), "Necesita establecer una llamada Primero.", "Informacion", MessageBoxButton.OK, MessageBoxImage.Warning, MessageBoxResult.Cancel, true);                       
                return;
            }

            string referTo = string.Empty;
            Trasferencia_UC TransferDlg = new Trasferencia_UC();
           // ViewWindow_Modal.Cerrar = ViewWindow_Modal.WinBehavior.DontClose;
            MessageBoxResult Response = ViewWindow_Modal.Show(TransferDlg, "Trasferencia", ViewWindow_Modal.MyMessageBoxButton.X);
            if (Response == MessageBoxResult.OK)
            {
                referTo = TransferDlg.GetTransferNumber();            
            }
            
            
            

            

            //if (referTo.Length <= 0)
            //{
            //    MessageBox.Show("El numero de Transferencia esta vacio");
            //    return;
            //}

            int rt = _core.refer(_CallSessions[_CurrentlyLine].getSessionId(), referTo);
            if (rt != 0)
            {
                string Text = "Linea " + _CurrentlyLine.ToString();
                textBlockCallStateInfo.Text = Text + ": Fallo al Transferir";
                // ListBoxSIPLog.Items.Add(Text);
            }
            else
            {
                string Text = "Linea " + _CurrentlyLine.ToString();
                textBlockCallStateInfo.Text = Text + ": Transferencia";
                //ListBoxSIPLog.Items.Add(Text);
            }
        }
       
    }
}
