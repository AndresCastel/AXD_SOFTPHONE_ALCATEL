using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using Axede.WPF.Softphone.Applications.BussinesClass.Enum;
using Axede.WPF.Softphone.Applications.GUI.User_Controls;
using Axede.WPF.Softphone.Applications.PortSIP_Class;
using Axede.WPF.Softphone.Applications.UtilControls.PopUp;

namespace Axede.WPF.Softphone.Applications.GUI.Principal
{
    /// <summary>
    /// Interaction logic for SoftphoneWPF.xaml
    /// </summary>
    /// <summary>
    /// Interaction logic for Window1.xaml
    /// </summary>
    public partial class SoftphoneWPF : Window, SIPCallbackEvents
    {

        private const int MAX_LINES = 9; // Maximum lines
        private const int LINE_BASE = 1;

        private int sessionId;

        private ControlVideo _popcontrol;
        public ControlVideo Popcontrol
        {
            get { return _popcontrol; }
            set { _popcontrol = value; }
        }


        private Session[] _CallSessions = new Session[MAX_LINES];

        private bool _SIPInited = false;
        private bool _SIPLogined = false;
        private int _CurrentlyLine = LINE_BASE;


        private PortSIPCore _core;


        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        #region Llamado Hijos
        void Botonera_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {

            if (sender is Botonera__UC)
            {
                //if (Botonera.AccionBoton == BotoneraEnum.ASTERISCO)
                //{
                //    textBlockDialingNumber.Text = textBlockDialingNumber.Text + "*";
                //}
                //else if (Botonera.AccionBoton == BotoneraEnum.NUMERAL)
                //{
                //    textBlockDialingNumber.Text = textBlockDialingNumber.Text + "#";
                //}
                //else { textBlockDialingNumber.Text = textBlockDialingNumber.Text + (int)Botonera.AccionBoton; }
            }
        }
        #endregion

        public SoftphoneWPF()
        {
            InitializeComponent();
           // Botonera.PropertyChanged+=Botonera_PropertyChanged;
        }

        private void ButtonSendVideo_Click(object sender, RoutedEventArgs e)
        {
            if (_SIPInited == false)
            {
                return;
            }

            if (_CallSessions[_CurrentlyLine].getSessionState() == false)
            {
                return;
            }

            int rt = _core.startVideoSending(_CallSessions[_CurrentlyLine].getSessionId(), true);
            if (rt != 0)
            {
                MessageBox.Show("Start video sending failed.");
            }
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
          //  MessageBox.Show("This sample was built base on evaluation PortSIP VoIP SDK, which allows only three minutes conversation. The conversation will be cut off automatically after three minutes, then you can't hearing anything. Feel free contact us at: sales@portsip.com to purchase the official version.", "Information");


            // Create the call sessions array, the PortSIP VoIP SDK allows maximum 100 lines,
            // but we just use 8 lines with this sample, we need a class to save the call sessions information

            int i = 0;
            sliderSpeaker.Value = 0;
            sliderMicrophone.Value = 0;
            for (i = 0; i < MAX_LINES; ++i)
            {
                _CallSessions[i] = new Session();
                _CallSessions[i].reset();
            }

            _SIPInited = false;
            _SIPLogined = false;
            _CurrentlyLine = LINE_BASE;
           
        }


        private void sliderSpeaker_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (_SIPInited == false)
            {
                return;
            }

            _core.setSpeakerVolume((Int32)e.NewValue);
        }

        private void sliderMicrophone_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (_SIPInited == false)
            {
                return;
            }

            _core.setMicVolume((Int32)e.NewValue);
        }


        private void joinConference(Int32 index)
        {
            if (_SIPInited == false)
            {
                return;
            }
            //if (CheckBoxConf.IsChecked == false)
            //{
            //    return;
            //}

            _core.joinToConference(_CallSessions[index].getSessionId());

            _CallSessions[index].setHoldState(false);
        }


        private void loadDevices()
        {
            if (_SIPInited == false)
            {
                return;
            }

            int num = _core.getNumOfPlayoutDevices();
            for (int i = 0; i < num; ++i)
            {
                StringBuilder deviceName = new StringBuilder();
                deviceName.Length = 256;

                //if (_core.getPlayoutDeviceName(i, deviceName, 256) == 0)
                //{
                //    ComboBoxSpeakers.Items.Add(deviceName.ToString());
                //}

                //ComboBoxSpeakers.SelectedIndex = 0;
            }


            num = _core.getNumOfRecordingDevices();
            for (int i = 0; i < num; ++i)
            {
                StringBuilder deviceName = new StringBuilder();
                deviceName.Length = 256;

                //if (_core.getRecordingDeviceName(i, deviceName, 256) == 0)
                //{
                //    ComboBoxMicrophones.Items.Add(deviceName.ToString());
                //}

                //ComboBoxMicrophones.SelectedIndex = 0;
            }


            num = _core.getNumOfVideoCaptureDevices();
            for (int i = 0; i < num; ++i)
            {
                StringBuilder uniqueId = new StringBuilder();
                uniqueId.Length = 256;
                StringBuilder deviceName = new StringBuilder();
                deviceName.Length = 256;

                //if (_core.getVideoCaptureDeviceName(i, uniqueId, 256, deviceName, 256) == 0)
                //{
                //    ComboBoxCameras.Items.Add(deviceName.ToString());
                //}

                //ComboBoxCameras.SelectedIndex = 0;
            }


            int volume = _core.getSpeakerVolume();
            sliderSpeaker.Value = volume;

            volume = _core.getMicVolume();
            sliderMicrophone.Value = volume;

        }



        private void deRegisterFromServer()
        {
            if (_SIPInited == false)
            {
                return;
            }



            for (int i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getRecvCallState() == true)
                {
                    string reason = "Busy here";
                    _core.rejectCall(_CallSessions[i].getSessionId(), 486, reason);
                }
                else if (_CallSessions[i].getSessionState() == true)
                {
                    _core.terminateCall(_CallSessions[i].getSessionId());
                }

                _CallSessions[i].reset();
            }

            if (_SIPLogined == true)
            {
                _core.unRegisterServer();
                _SIPLogined = false;
            }


            if (_SIPInited == true)
            {
                //
                // MUST called before _core.unInitliaze();
                //
                _core.shutdownCallbackHandlers();

                _core.unInitialize();

                //
                // MUST called after _core.unInitliaze();
                //
                _core.releaseCallbackHandlers();


                _SIPInited = false;
            }


         

         //   ComboBoxLines.SelectedIndex = 0;
            _CurrentlyLine = LINE_BASE;


            //ComboBoxSpeakers.Items.Clear();
            //ComboBoxMicrophones.Items.Clear();
            //ComboBoxCameras.Items.Clear();

        }


        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            deRegisterFromServer();
        }


        public void Conectar(string UserName, string Clave, string Alias, string SIP_Server, string Port)
        {
            if (_SIPInited == true)
            {
                MessageBox.Show("You are already logged in.");
                return;
            }
            if (string.IsNullOrEmpty(Alias))
            {
                textBlockIdentifier.Text = UserName;
            }
            if (UserName.Length <= 0)
            {
                MessageBox.Show("The user name does not allows empty.");
                return;
            }


            //if (Clave.Length <= 0)
            //{
            //    MessageBox.Show("The password does not allows empty.");
            //    return;
            //}

            if (SIP_Server.Length <= 0)
            {
                MessageBox.Show("The SIP server does not allows empty.");
                return;
            }


            int SIPServerPort = 0;
            if (Port.Length > 0)
            {
                SIPServerPort = int.Parse(Port);
                if (SIPServerPort > 65535 || SIPServerPort <= 0)
                {
                    MessageBox.Show("The SIP server port is out of range.");

                    return;
                }
            }


            int StunServerPort = 0;
            //if (TextBoxStunPort.Text.Length > 0)
            //{
            //    StunServerPort = int.Parse(TextBoxStunPort.Text);
            //    if (StunServerPort > 65535 || StunServerPort <= 0)
            //    {
            //        MessageBox.Show("The Stun server port is out of range.");

            //        return;
            //    }
            //}


            TRANSPORT_TYPE transport = TRANSPORT_TYPE.TRANSPORT_UDP;
            //switch (ComboBoxTransport.SelectedIndex)
            //{
            //    case 0:
            //        transport = TRANSPORT_TYPE.TRANSPORT_UDP;
            //        break;

            //    case 1:

            //        transport = TRANSPORT_TYPE.TRANSPORT_TLS;
            //        break;

            //    case 2:
            //        transport = TRANSPORT_TYPE.TRANSPORT_TCP;
            //        break;
            //}



            //
            // Create the class instance of PortSIP SDK wrapper 
            //

            _core = new PortSIPCore(0, this);

            //
            // Create and set the SIP callback handers, this MUST called before
            // _core.initialize();
            //
            _core.createCallbackHandlers();

            string logFilePath = "d:\\"; // The log file path, you can change it - the folder MUST exists
            string agent = "PortSIP VoIP SDK 7.0";
            string stunServer = string.Empty;
            int errorCode = 0;



            // Initialize the SDK
            Boolean state = _core.initialize(transport,
                             PORTSIP_LOG_LEVEL.PORTSIP_LOG_NONE,
                             logFilePath,
                             MAX_LINES,
                             agent,
                             stunServer,
                             StunServerPort,
                             false,
                             false,
                             out errorCode);

            if (state == false)
            {
                _core.shutdownCallbackHandlers();
                _core.releaseCallbackHandlers();
                MessageBox.Show("initialize failed.");
                return;
            }


            _SIPInited = true;

            loadDevices();

            string userName = UserName;
            string password = Clave;
            string userDomain = string.Empty;
            string SIPServer = SIP_Server;
            string displayName = Alias;
            string authName = string.Empty;


            int outboundServerPort = 0;
            string outboundServer = "";


            Random rd = new Random();
            int LocalSIPPort = rd.Next(1000, 5000) + 4000; // Generate the random port for SIP

            StringBuilder localIP = new StringBuilder();
            localIP.Length = 64;
            int rt = _core.getLocalIP(0, localIP, 64);
            if (rt != 0)
            {
                _core.shutdownCallbackHandlers();
                _core.unInitialize();
                _core.releaseCallbackHandlers();

                _SIPInited = false;

                MessageBox.Show("getLocalIP failed.");
                return;
            }


            // Set the SIP user information
            rt = _core.setUserInfo(userName,
                                       displayName,
                                       authName,
                                       password,
                                       localIP.ToString(),
                                       LocalSIPPort,
                                       userDomain,
                                       SIPServer,
                                       SIPServerPort,
                                       outboundServer,
                                       outboundServerPort);
            if (rt != 0)
            {
                _core.shutdownCallbackHandlers();
                _core.unInitialize();
                _core.releaseCallbackHandlers();

                _SIPInited = false;

                MessageBox.Show("setUserInfo failed.");
                return;
            }


            SetSRTPType();

            string licenseKey = "NTRGNkY1QUM1MERFOUQzNzUyMDhBMEM5NzhEOUVFNzRAOEUxQzM4QTU1QUQ2RUQ2NDFCRjc2Mzk4NDYyNDAxQzlAMkQ5MDFCMjc5MDQ0OEUxOUQ2QTJCNjkyMjZBNzZCMkNAQjg2RTQzNENGNzlENEU3OEYzRjQ2NEU1NTZCQ0M3RjA.";
            _core.setLicenseKey(licenseKey);



            //_core.setLocalVideoWindow(localVideoWindow.Child.Handle);


            //SetVideoResolution();
            //SetVideoQuality();

            //UpdateAudioCodecs();
            //UpdateVideoCodecs();

           // InitSettings();


            rt = _core.registerServer(90);
            if (rt != 0)
            {
                _SIPInited = false;

                _core.shutdownCallbackHandlers();
                _core.unInitialize();

                _core.releaseCallbackHandlers();

                // ListBoxSIPLog.Items.Clear();

                MessageBox.Show("register to server failed.");
            }
            else { textBlockCallStateInfo.Text = "Conectado";
            textBlockRegStatus.Text = "Online";
            textBlockIdentifier.Text = Alias;
            }
         
           // ListBoxSIPLog.Items.Add("Registering...");
        }


        private void button2_Click(object sender, RoutedEventArgs e)
        {
            deRegisterFromServer();
        }


        private void ComboBoxSRTP_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            SetSRTPType();
        }

        private void ButtonDial_Click(object sender, RoutedEventArgs e)
        {
            if (_SIPInited == false || _SIPLogined == false)
            {
                return;
            }
            if (textBlockDialingNumber.Text.Length <= 0)
            {
                MessageBox.Show("The phone number is empty.");
                return;
            }

            if (_CallSessions[_CurrentlyLine].getSessionState() == true || _CallSessions[_CurrentlyLine].getRecvCallState() == true)
            {
                MessageBox.Show("Current line is busy now, please switch a line.");
                return;
            }


            string callTo = textBlockDialingNumber.Text;

            UpdateAudioCodecs();
            UpdateVideoCodecs();

            if (_core.isAudioCodecEmpty() == true)
            {
                InitDefaultAudioCodecs();
            }



            //  Usually for 3PCC need to make call without SDP

            Boolean hasSdp = true;
            //if (CheckBoxSDP.IsChecked == true)
            //{
            //    hasSdp = false;
            //}

           // _core.setAudioDeviceId(ComboBoxMicrophones.SelectedIndex, ComboBoxSpeakers.SelectedIndex);

            int errorCode = 0;
            int sessionId = _core.call(callTo, hasSdp, out errorCode);
            //if (errorCode != 0)
            //{
            //    ListBoxSIPLog.Items.Add("Call failed");
            //    return;
            //}

         //   _core.setRemoteVideoWindow(sessionId, remoteVideoWindow.Child.Handle);

            _CallSessions[_CurrentlyLine].setSessionId(sessionId);
            _CallSessions[_CurrentlyLine].setSessionState(true);

           
            textBlockCallStateInfo.Text = "Llamando...";
         //   ListBoxSIPLog.Items.Add(Text);
        }



        private void ButtonAnswer_Click(object sender, RoutedEventArgs e)
        {
            if (_SIPInited == false || _SIPLogined == false)
            {
                return;
            }

            if (_CallSessions[_CurrentlyLine].getRecvCallState() == false)
            {
                MessageBox.Show("Current line hasn't incoming call, please switch a line.");
                return;
            }

            _CallSessions[_CurrentlyLine].setRecvCallState(false);
            _CallSessions[_CurrentlyLine].setSessionState(true);


          //  _core.setRemoteVideoWindow(_CallSessions[_CurrentlyLine].getSessionId(), remoteVideoWindow.Child.Handle);


            int rt = _core.answerCall(_CallSessions[_CurrentlyLine].getSessionId());
            if (rt == 0)
            {
              
                textBlockCallStateInfo.Text = "Llamada Establesida";
             //   ListBoxSIPLog.Items.Add(Text);

                joinConference(_CurrentlyLine);
            }
            else
            {
                _CallSessions[_CurrentlyLine].reset();

               
                textBlockCallStateInfo.Text = "Respuesta de llamada Fallo!";
                //ListBoxSIPLog.Items.Add(Text);
            }
        }


        private void ButtonReject_Click(object sender, RoutedEventArgs e)
        {
            if (_SIPInited == false || _SIPLogined == false)
            {
                return;
            }

            if (_CallSessions[_CurrentlyLine].getRecvCallState() == true)
            {
                string reason = "Busy here";
                _core.rejectCall(_CallSessions[_CurrentlyLine].getSessionId(), 486, reason);
                _CallSessions[_CurrentlyLine].reset();

                string Text = "Line " + _CurrentlyLine.ToString();
                textBlockCallStateInfo.Text = Text + "Llamada Rechazada";
             //   ListBoxSIPLog.Items.Add(Text);

                return;
            }
        }


        private void BtnColgar_Click(object sender, RoutedEventArgs e)
        {
            if (_SIPInited == false || _SIPLogined == false)
            {
                return;
            }
            textBlockDialingNumber.Text = string.Empty;
            if (_CallSessions[_CurrentlyLine].getRecvCallState() == true)
            {
                string reason = "Ocupado";
                _core.rejectCall(_CallSessions[_CurrentlyLine].getSessionId(), 486, reason);
                _CallSessions[_CurrentlyLine].reset();
              
                textBlockCallStateInfo.Text =  "Llamada Rechazada";
             //   ListBoxSIPLog.Items.Add(Text);

                return;
            }

            if (_CallSessions[_CurrentlyLine].getSessionState() == true)
            {
                _core.terminateCall(_CallSessions[_CurrentlyLine].getSessionId());
                _CallSessions[_CurrentlyLine].reset();

               
                textBlockCallStateInfo.Text = "Colgado";
              //  ListBoxSIPLog.Items.Add(Text);
            }
        }



        private void ButtonHold_Click(object sender, RoutedEventArgs e)
        {
            if (_SIPInited == false || _SIPLogined == false)
            {
                return;
            }

            if (_CallSessions[_CurrentlyLine].getSessionState() == false)
            {
                return;
            }


            if (_CallSessions[_CurrentlyLine].getHoldState() == true)
            {
                return;
            }


            string Text;
            int rt = _core.hold(_CallSessions[_CurrentlyLine].getSessionId());

            if (rt != 0)
            {
                Text = "Line " + _CurrentlyLine.ToString();
                textBlockCallStateInfo.Text = Text + ": hold failed.";
           //     ListBoxSIPLog.Items.Add(Text);

                return;
            }

            _CallSessions[_CurrentlyLine].setHoldState(true);

            Text = "Line " + _CurrentlyLine.ToString();
            textBlockCallStateInfo.Text = Text + ": hold";
         //   ListBoxSIPLog.Items.Add(Text);
        }

     

        private void ButtonTransfer_Click(object sender, RoutedEventArgs e)
        {
            //if (_SIPInited == false || _SIPLogined == false)
            //{
            //    return;
            //}

            //if (_CallSessions[_CurrentlyLine].getSessionState() == false)
            //{
            //    MessageBox.Show("Need to make the call established first.");
            //    return;
            //}

            //SoftphoneWPF TransferDlg = new SoftphoneWPF();
            //if (TransferDlg.ShowDialog() == false)
            //{
            //    return;
            //}

            //string referTo = TransferDlg.GetTransferNumber();

            //if (referTo.Length <= 0)
            //{
            //    MessageBox.Show("The transfer number is empty.");
            //    return;
            //}



            //int rt = _core.refer(_CallSessions[_CurrentlyLine].getSessionId(), referTo);
            //if (rt != 0)
            //{
            //    string Text = "Line " + _CurrentlyLine.ToString();
            //    textBlockCallStateInfo.Text = Text + ": Transfer failed";
            //   // ListBoxSIPLog.Items.Add(Text);
            //}
            //else
            //{
            //    string Text = "Line " + _CurrentlyLine.ToString();
            //    textBlockCallStateInfo.Text = Text + ": Transferring";
            //    //ListBoxSIPLog.Items.Add(Text);
            //}
        }



        private void ComboBoxLines_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            //if (_SIPInited == false || _SIPLogined == false)
            //{
            //    ComboBoxLines.SelectedIndex = 0;
            //    return;
            //}

            //if (_CurrentlyLine == (ComboBoxLines.SelectedIndex + LINE_BASE))
            //{
            //    return;
            //}

            //if (CheckBoxConf.IsChecked == true)
            //{
            //    _CurrentlyLine = ComboBoxLines.SelectedIndex + LINE_BASE;
            //    return;
            //}

            //// To switch the line, must hold currently line first
            //if (_CallSessions[_CurrentlyLine].getSessionState() == true && _CallSessions[_CurrentlyLine].getHoldState() == false)
            //{
            //    _core.hold(_CallSessions[_CurrentlyLine].getSessionId());
            //    _CallSessions[_CurrentlyLine].setHoldState(true);

            //    string Text = "Line " + _CurrentlyLine.ToString();
            //    Text = Text + ": Hold";
            //    ListBoxSIPLog.Items.Add(Text);
            //}



            //_CurrentlyLine = ComboBoxLines.SelectedIndex + LINE_BASE;


            //// If target line was in hold state, then un-hold it
            //if (_CallSessions[_CurrentlyLine].getSessionState() == true && _CallSessions[_CurrentlyLine].getHoldState() == true)
            //{
            //    _core.unHold(_CallSessions[_CurrentlyLine].getSessionId());
            //    _CallSessions[_CurrentlyLine].setHoldState(false);

            //    string Text = "Line " + _CurrentlyLine.ToString();
            //    Text = Text + ": UnHold - call established";
            //    ListBoxSIPLog.Items.Add(Text);
            //}
        }

        private void CheckBoxConf_Checked(object sender, RoutedEventArgs e)
        {
            //if (_SIPInited == false || _SIPLogined == false)
            //{
            //    CheckBoxConf.IsChecked = false;
            //    return;
            //}


            //VIDEO_RESOLUTION videoResolution = VIDEO_RESOLUTION.VIDEO_CIF;

            //switch (ComboBoxVideoResolution.SelectedIndex)
            //{
            //    case 0:
            //        videoResolution = VIDEO_RESOLUTION.VIDEO_QCIF;
            //        break;
            //    case 1:
            //        videoResolution = VIDEO_RESOLUTION.VIDEO_CIF;
            //        break;
            //    case 2:
            //        videoResolution = VIDEO_RESOLUTION.VIDEO_VGA;
            //        break;
            //    case 3:
            //        videoResolution = VIDEO_RESOLUTION.VIDEO_SVGA;
            //        break;
            //    case 4:
            //        videoResolution = VIDEO_RESOLUTION.VIDEO_XVGA;
            //        break;
            //    case 5:
            //        videoResolution = VIDEO_RESOLUTION.VIDEO_720P;
            //        break;
            //}


            //if (CheckBoxConf.IsChecked == true)
            //{
            //    int rt = _core.createConference(remoteVideoWindow.Child.Handle, videoResolution, true);
            //    if (rt == 0)
            //    {
            //        ListBoxSIPLog.Items.Add("Make conference succeeded");
            //        for (int i = LINE_BASE; i < MAX_LINES; ++i)
            //        {
            //            if (_CallSessions[i].getSessionState() == true)
            //            {
            //                joinConference(i);
            //            }
            //        }
            //    }
            //    else
            //    {
            //        ListBoxSIPLog.Items.Add("Conference failed");
            //        CheckBoxConf.IsChecked = false;
            //    }
            //}
            //else
            //{
            //    // Stop conference

            //    // Before stop the conference, MUST place all lines to hold state

            //    int[] sessionIds = new int[9] { 0, 0, 0, 0, 0, 0, 0, 0, 0 };


            //    for (int i = LINE_BASE; i < MAX_LINES; ++i)
            //    {
            //        if (_CallSessions[i].getSessionState() == true && _CallSessions[i].getHoldState() == false)
            //        {

            //            sessionIds[i] = _CallSessions[i].getSessionId();

            //            // Hold it 
            //            _core.hold(sessionIds[i]);
            //            _CallSessions[i].setHoldState(true);
            //        }
            //    }

            //    _core.destroyConference();
            //    ListBoxSIPLog.Items.Add("Taken off Conference");

            //}
        }



        private void CheckBoxMute_Checked(object sender, RoutedEventArgs e)
        {
            //if (_SIPInited == false || _SIPLogined == false)
            //{
            //    return;
            //}

            //if (CheckBoxMute.IsChecked == true)
            //{
            //    _core.muteMicrophone(true);
            //}
            //else
            //{
            //    _core.muteMicrophone(false);
            //}
        }


        private void ComboBoxSpeakers_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            //if (_SIPInited == true)
            //{
            //    _core.setAudioDeviceId(ComboBoxMicrophones.SelectedIndex, ComboBoxSpeakers.SelectedIndex);
            //}
        }

     

        private void ButtonLocalVideo_Click(object sender, RoutedEventArgs e)
        {
            //if (_SIPInited == false)
            //{
            //    return;
            //}

            //string buttonContent = (string)ButtonLocalVideo.Content;
            //if (buttonContent == "Local Video")
            //{
            //    _core.viewLocalVideo(true);
            //    ButtonLocalVideo.Content = "Stop Local";
            //}
            //else
            //{
            //    _core.viewLocalVideo(false);
            //    localVideoWindow.Child.Refresh();

            //    ButtonLocalVideo.Content = "Local Video";
            //}
        }

     

        private void InitSettings()
        {
            if (_SIPInited == false)
            {
                return;
            }

            _core.enableDTMFOfRFC2833(101); // Use DTMF as RTP event - RFC2833
            _core.setDtmfSamples(160);

            //      _core.enableDtmfOfInfo(); // Use DTMF as SIP INFO method

            //if (checkBoxAEC.IsChecked == true)
            //{
                _core.enableAEC(true);
            //}
            //else
            //{
            //    _core.enableAEC(false);
            //}

            //if (checkBoxVAD.IsChecked == true)
            //{
            //    _core.enableVAD(true);
            //}
            //else
            //{
                _core.enableVAD(false);
          //  }

            //if (checkBoxCNG.IsChecked == true)
            //{
            //    _core.enableCNG(true);
            //}
            //else
            //{
                _core.enableCNG(false);
          //  }

            //if (checkBoxAGC.IsChecked == true)
            //{
            //    _core.enableAGC(true);
            //}
            //else
            //{
                _core.enableAGC(false);
          //  }
        }




        private void InitDefaultAudioCodecs()
        {
            if (_SIPInited == false)
            {
                return;
            }


            _core.clearAudioCodec();

            // Default we just using PCMU, PCMA, G729
            _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_PCMU);
            _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_PCMA);
            _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_G729);

            _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_DTMF);  // for DTMF as RTP Event - RFC2833
        }


        private void UpdateAudioCodecs()
        {
            if (_SIPInited == false)
            {
                return;
            }

            _core.clearAudioCodec();

            //if (checkBoxPCMU.IsChecked == true)
            //{
                _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_PCMU);
            //}


            //if (checkBoxPCMA.IsChecked == true)
            //{
                _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_PCMA);
           // }


            //if (checkBoxG729.IsChecked == true)
            //{
                _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_G729);
          //  }


            //if (checkBoxILBC.IsChecked == true)
            //{
            //    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_ILBC);
            //}


            //if (checkBoxGSM.IsChecked == true)
            //{
            //    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_GSM);
            //}


            //if (checkBoxAMR.IsChecked == true)
            //{
            //    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_AMR);
            //}

            //if (CheckBoxG722.IsChecked == true)
            //{
            //    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_G722);
            //}

            //if (CheckBoxSpeex.IsChecked == true)
            //{
            //    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_SPEEX);
            //}

            //if (CheckBoxAMRwb.IsChecked == true)
            //{
            //    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_AMRWB);
            //}

            //if (CheckBoxSpeexWB.IsChecked == true)
            //{
            //    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_SPEEXWB);
            //}

            //if (CheckBoxG7221.IsChecked == true)
            //{
            //    _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_G7221);
            //}

            _core.addAudioCodec(AUDIOCODEC_TYPE.AUDIOCODEC_DTMF);

        }


        private void UpdateVideoCodecs()
        {
            if (_SIPInited == false)
            {
                return;
            }

            _core.clearVideoCodec();

            //if (checkBoxH263.IsChecked == true)
            //{
            //    _core.addVideoCodec(VIDEOCODEC_TYPE.VIDEOCODEC_H263);
            //}

            //if (checkBoxH2631998.IsChecked == true)
            //{
            //    _core.addVideoCodec(VIDEOCODEC_TYPE.VIDEOCODEC_H263_1998);
            //}

            //if (checkBoxH264.IsChecked == true)
            //{
                _core.addVideoCodec(VIDEOCODEC_TYPE.VIDEOCODEC_H264);
            //}

            //if (checkBoxVP8.IsChecked == true)
            //{
            //    _core.addVideoCodec(VIDEOCODEC_TYPE.VIDEOCODEC_VP8);
            //}

        }


        private void SetSRTPType()
        {
            if (_SIPInited == false)
            {
                return;
            }

            SRTP_POLICY SRTPPolicy = SRTP_POLICY.SRTP_POLICY_NONE;

            //switch (ComboBoxSRTP.SelectedIndex)
            //{
            //    case 0:
            //        SRTPPolicy = SRTP_POLICY.SRTP_POLICY_NONE;
            //        break;

            //    case 1:
            //        SRTPPolicy = SRTP_POLICY.SRTP_POLICY_PREFER;
            //        break;

            //    case 2:
            //        SRTPPolicy = SRTP_POLICY.SRTP_POLICY_FORCE;
            //        break;
            //}

            _core.setSrtpPolicy(SRTPPolicy);
        }

        private void SetVideoResolution()
        {
            if (_SIPInited == false)
            {
                return;
            }

            VIDEO_RESOLUTION videoResolution = VIDEO_RESOLUTION.VIDEO_CIF;

            //switch (ComboBoxVideoResolution.SelectedIndex)
            //{
            //    case 0:
            //        videoResolution = VIDEO_RESOLUTION.VIDEO_QCIF;
            //        break;
            //    case 1:
            //        videoResolution = VIDEO_RESOLUTION.VIDEO_CIF;
            //        break;
            //    case 2:
            //        videoResolution = VIDEO_RESOLUTION.VIDEO_VGA;
            //        break;
            //    case 3:
            //        videoResolution = VIDEO_RESOLUTION.VIDEO_SVGA;
            //        break;
            //    case 4:
            //        videoResolution = VIDEO_RESOLUTION.VIDEO_XVGA;
            //        break;
            //    case 5:
            //        videoResolution = VIDEO_RESOLUTION.VIDEO_720P;
            //        break;
            //    case 6:
            //        videoResolution = VIDEO_RESOLUTION.VIDEO_QVGA;
            //        break;
            //}

            _core.setVideoResolution(videoResolution);
        }

        private void SetVideoQuality()
        {
            if (_SIPInited == false)
            {
                return;
            }

        //    _core.setVideoBitrate((Int32)sliderVideoQualityLevel.Value);
        }





        //////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /// <summary>
        ///  With below all onXXX functions, you MUST use the Invoke/BeginInvoke method if you want
        ///  modify any control on the Forms.
        ///  More details please visit: http://msdn.microsoft.com/en-us/library/ms171728.aspx
        ///  The Invoke method is recommended.
        ///  
        ///  if you don't like Invoke/BeginInvoke method, then  you can add this line to Form_Load:
        ///  Control.CheckForIllegalCrossThreadCalls = false;
        ///  This requires .NET 2.0 or higher
        /// 
        /// </summary>
        /// 
        public Int32 onRegisterSuccess(Int32 callbackObject, Int32 statusCode, String statusText)
        {
            // use the Invoke method to modify the control.

            //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
            //{
            //    ListBoxSIPLog.Items.Add("Registration succeeded");
            //}));

            _SIPLogined = true;


            return 0;
        }


        public Int32 onRegisterFailure(Int32 callbackObject, Int32 statusCode, String statusText)
        {
            //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
            //{
            //    ListBoxSIPLog.Items.Add("Registration failure");
            //}));


            _SIPLogined = false;

            return 0;
        }


           public Int32 onInviteIncoming(Int32 callbackObject,
                                             Int32 sessionId,
                                             String caller,
                                             String callerDisplayName,
                                             String callee,
                                             String calleeDisplayName,
                                             String audioCodecName,
                                             String videoCodecName,
                                             Boolean hasVideo)
        {

            int i = 0;
            bool state = false;
            string Text = string.Empty;

            if (hasVideo == true)
            {
                // This incoming call has video SDP
            }
            else
            {
                // This incoming call hasn't the video SDP
            }

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionState() == false && _CallSessions[i].getRecvCallState() == false)
                {
                    state = true;
                    _CallSessions[i].setRecvCallState(true);
                    break;
                }
            }

            if (state == false)
            {
                string reason = "Busy here";
                _core.rejectCall(sessionId, 486, reason);

                return 0;
            }


            // For DND(Do not disturb
            Boolean DND = false;
            //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
            //{
            //    if (CheckBoxDND.IsChecked == true)
            //    {
            //        DND = true;
            //    }
            //}));


            if (DND == true)
            {
                string reason = "Busy here";
                _core.rejectCall(sessionId, 486, reason);
                _CallSessions[i].reset();

                Text = "Line " + i.ToString();
                Text = Text + ": Reject the call by DND";


                //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
                //{
                //    ListBoxSIPLog.Items.Add(Text);
                //}));


                return 0;
            }




            _CallSessions[i].setSessionId(sessionId);

            bool needIgnoreAutoAnswer = false;
            int j = 0;

            for (j = LINE_BASE; j < MAX_LINES; ++j)
            {
                if (_CallSessions[j].getSessionState() == true)
                {
                    needIgnoreAutoAnswer = true;
                    break;
                }
            }


            Boolean AA = false;
            //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
            //{
            //    if (CheckBoxAA.IsChecked == true)
            //    {
            //        AA = true;
            //    }
            //}));


            if (needIgnoreAutoAnswer == false && AA == true)
            {
                _CallSessions[i].setRecvCallState(false);
                _CallSessions[i].setSessionState(true);


                int rt = 0;           

                //textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
                //{
                //    _core.setRemoteVideoWindow(_CallSessions[_CurrentlyLine].getSessionId(), remoteVideoWindow.Child.Handle);
                //    rt = _core.answerCall(_CallSessions[i].getSessionId());
                //}));


                if (rt == 0)
                {
                    Text = "Line " + i.ToString();
                    Text = Text + ": Answered call by Auto answer";


                    //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
                    //{
                    //    ListBoxSIPLog.Items.Add(Text);
                    //}));
                }
                else
                {
                    _CallSessions[i].reset();

                    Text = "Line " + i.ToString();
                    Text = Text + ": Answered call failed by Auto answer";

                    //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
                    //{
                    //    ListBoxSIPLog.Items.Add(Text);
                    //}));
                }

                return 0;
            }


            Text = "Line " + i.ToString();
            Text = Text + ": Call incoming from ";
            Text = Text + callerDisplayName;
            Text = Text + "<";
            Text = Text + caller;
            Text = Text + ">";


            //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
            //{
            //    ListBoxSIPLog.Items.Add(Text);
            //}));


            //  You should write your own code to play the wav file here for alert the incoming call(incoming tone);

            return 0;

        }         

        public Int32 onInviteTrying(Int32 callbackObject, Int32 sessionId, String caller, String callee)
        {
            int i = 0;
            bool state = false;

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }

           
            string Text = "Llamada Saliente...";

            textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
            {
                textBlockCallStateInfo.Text = Text;
            }));

            return 0;

        }

        public Int32 onInviteRinging(Int32 callbackObject,
                                            Int32 sessionId,
                                            Boolean hasEarlyMedia,
                                            Boolean hasVideo,
                                            String audioCodecName,
                                            String videoCodecName)
        {

            int i = 0;
            bool state = false;

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }

            if (hasEarlyMedia == false)
            {
                // Hasn't the early media, you must play the local WAVE  file for ringing tone
                // play the wav file for ring tone
            }
          
            string Text = "Llamando...";

            textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
            {
                textBlockCallStateInfo.Text = Text;
            }));


            return 0;
        }


        public Int32 onInviteAnswered(Int32 callbackObject,
                                             Int32 sessionId,
                                             Boolean hasVideo,
                                             Int32 statusCode,
                                             String statusText,
                                             String audioCodecName,
                                             String videoCodecName)
        {

            if (hasVideo == true)
            {
                // This incoming call has video SDP
            }
            else
            {
                // This incoming call hasn't the video SDP
            }


            int i = 0;
            bool state = false;

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }


            _CallSessions[i].setSessionState(true);

            
            string Text =  "Llamada Establecida";

            textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
            {
                textBlockCallStateInfo.Text = Text;
                //joinConference(i);
            }));
            //    
          


            return 0;
        }


        public Int32 onInviteFailure(Int32 callbackObject, Int32 sessionId, Int32 statusCode, String statusText)
        {

            int i = 0;
            bool state = false;

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }

            _CallSessions[i].reset();


           
            string Text = "Llamada Fallo";
            Text = Text + statusText;

            textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
            {
                textBlockCallStateInfo.Text = Text;
            }));



            //  the error reason is statusText
            //  the error code is statusCode

            return 0;
        }


        public Int32 onInviteClosed(Int32 callbackObject, Int32 sessionId)
        {

            int i = 0;
            bool state = false;

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }


            _CallSessions[i].reset();

          
            string Text ="Colgado";


            textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
            {
                textBlockCallStateInfo.Text = Text;
            }));


            return 0;
        }



        public Int32 onInviteUpdated(Int32 callbackObject,
                                            Int32 sessionId,
                                            Boolean hasVideo,
                                            String audioCodecName,
                                            String videoCodecName
                                            )
        {


            int i = 0;
            bool state = false;

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }

            string Text = "Line " + i.ToString();
            Text = Text + ": Call is updated";


            textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
            {
                textBlockCallStateInfo.Text = Text;
            }));

            return 0;

        }


        public Int32 onInviteUASConnected(Int32 callbackObject, Int32 sessionId, Int32 statusCode, String statusText)
        {

            return 0;
        }


        public Int32 onInviteUACConnected(Int32 callbackObject, Int32 sessionId, Int32 statusCode, String statusText)
        {

            return 0;
        }


        public Int32 onInviteBeginingForward(Int32 callbackObject, String forwardingTo)
        {

            string Text = "call has been forward to: ";
            Text = Text + forwardingTo;

            textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
            {
                textBlockCallStateInfo.Text = Text;
            }));


            return 0;
        }



        public Int32 onRemoteHold(Int32 callbackObject, Int32 sessionId)
        {

            int i = 0;
            bool state = false;

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }

            string Text = "Line " + i.ToString();
            Text = Text + ": Placed on hold by remote party";


            textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
            {
                textBlockCallStateInfo.Text = Text;
            }));

            return 0;
        }


        public Int32 onRemoteUnHold(Int32 callbackObject, Int32 sessionId)
        {

            int i = 0;
            bool state = false;

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }

            string Text = "Line " + i.ToString();
            Text = Text + ": Take off hold by remote party";

            textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
            {
                textBlockCallStateInfo.Text = Text;
            }));

            return 0;
        }


        public Int32 onTransferTrying(Int32 callbackObject, Int32 sessionId, String referTo)
        {

            int i = 0;
            bool state = false;

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }


            // for example, if A and B is established call, A transfer B to C, the transfer is trying,
            // B will got this transferTring event, and use referTo to know C ( C is "referTo" in this case)

            string Text = "Line " + i.ToString();
            textBlockCallStateInfo.Text = Text + ": Transfer Trying";

            //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
            //{
            //    ListBoxSIPLog.Items.Add(Text);
            //}));


            return 0;
        }

        public Int32 onTransferRinging(Int32 callbackObject, Int32 sessionId, Boolean hasVideo)
        {

            int i = 0;
            bool state = false;

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }

            string Text = "Line " + i.ToString();
            Text = Text + ": Transfer Ringing";

            textBlockCallStateInfo.Dispatcher.Invoke(new Action(delegate
            {
                textBlockCallStateInfo.Text = Text;
            }));


            // Use hasVideo to check does this transfer call has video.
            // if hasVideo is true, then it's have video, if hasVideo is false, means has no video.


            return 0;
        }


        public Int32 onPASVTransferSuccess(Int32 callbackObject, Int32 sessionId, Boolean hasVideo)
        {

            int i = 0;
            bool state = false;

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }



            string Text = "Line " + i.ToString();
            textBlockCallStateInfo.Text = Text + ": Transfer succeeded";

            //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
            //{
            //    _core.setRemoteVideoWindow(sessionId, remoteVideoWindow.Child.Handle);
            //    ListBoxSIPLog.Items.Add(Text);
            //}));

            return 0;
        }

        public Int32 onPASVTransferFailure(Int32 callbackObject, Int32 sessionId, Int32 statusCode, String statusText)
        {
            int i = 0;
            bool state = false;

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }


            //  statusText is error reason
            //  statusCode is error code

            string Text = "Line " + i.ToString();
            textBlockCallStateInfo.Text = Text + ": Transfer failed";

            //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
            //{
            //    ListBoxSIPLog.Items.Add(Text);
            //}));

            return 0;
        }



        public Int32 onACTVTransferSuccess(Int32 callbackObject, Int32 sessionId)
        {

            int i = 0;
            bool state = false;

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }


            string Text = "Line " + i.ToString();
            textBlockCallStateInfo.Text = Text + ": Transfer succeeded, closed the call";

            //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
            //{
            //    ListBoxSIPLog.Items.Add(Text);
            //}));


            // The ACTIVE Transfer success, then reset currently call.
            _CallSessions[i].reset();

            return 0;
        }

        public Int32 onACTVTransferFailure(Int32 callbackObject, Int32 sessionId, Int32 statusCode, String statusText)
        {
            int i = 0;
            bool state = false;

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }


            string Text = "Line " + i.ToString();
            textBlockCallStateInfo.Text = Text + ": Transfer failed";

            //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
            //{
            //    ListBoxSIPLog.Items.Add(Text);
            //}));


            //  statusText is error reason
            //  statusCode is error code

            return 0;
        }




        public Int32 onRecvPagerMessage(Int32 callbackObject, String from, String fromDisplayName, StringBuilder message)
        {

            string Text = "Received SIP pager message from ";
            Text += from;
            Text += " :";
            Text += message.ToString();

            MessageBox.Show(Text);


            return 0;
        }

        public Int32 onSendPagerMessageSuccess(Int32 callbackObject,
                                                      String caller,
                                                      String callerDisplayName,
                                                      String callee,
                                                      String calleeDisplayName
                                                     )
        {


            return 0;
        }



        public Int32 onSendPagerMessageFailure(Int32 callbackObject,
                                                       String caller,
                                                      String callerDisplayName,
                                                      String callee,
                                                      String calleeDisplayName,
                                                      Int32 statusCode,
                                                      String statusText
                                                     )
        {
            return 0;
        }






        public Int32 onArrivedSignaling(Int32 callbackObject, Int32 sessionId, StringBuilder signaling)
        {
            // This event will be fired when the SDK received a SIP message
            // you can use signaling to access the SIP message.

            return 0;
        }

        public Int32 onSentSignaling(Int32 callbackObject, StringBuilder signaling)
        {
            // This event will be fired when the SDK sent a SIP message
            // you can use signaling to access the SIP message.

            return 0;
        }


        public Int32 onWaitingVoiceMessage(Int32 callbackObject,
                                                  String messageAccount,
                                                  Int32 urgentNewMessageCount,
                                                  Int32 urgentOldMessageCount,
                                                  Int32 newMessageCount,
                                                  Int32 oldMessageCount)
        {

            string Text = messageAccount;
            Text += " has voice message.";


            //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
            //{
            //    ListBoxSIPLog.Items.Add(Text);
            //}));

            // You can use these parameters to check the voice message count

            //  urgentNewMessageCount;
            //  urgentOldMessageCount;
            //  newMessageCount;
            //  oldMessageCount;

            return 0;
        }


        public Int32 onWaitingFaxMessage(Int32 callbackObject,
                                                  String messageAccount,
                                                  Int32 urgentNewMessageCount,
                                                  Int32 urgentOldMessageCount,
                                                  Int32 newMessageCount,
                                                  Int32 oldMessageCount)
        {
            string Text = messageAccount;
            Text += " has FAX message.";


            //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
            //{
            //    ListBoxSIPLog.Items.Add(Text);
            //}));



            // You can use these parameters to check the FAX message count

            //  urgentNewMessageCount;
            //  urgentOldMessageCount;
            //  newMessageCount;
            //  oldMessageCount;



            return 0;
        }


        public Int32 onRecvDtmfTone(Int32 callbackObject, Int32 sessionId, Int32 tone)
        {

            int i = 0;
            bool state = false;

            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }


            string DTMFTone = tone.ToString();
            if (DTMFTone == "10")
            {
                DTMFTone = "*";
            }
            else if (DTMFTone == "11")
            {
                DTMFTone = "#";
            }

            string Text = "Received DTMF Tone: ";
            Text += DTMFTone;
            Text += " on line ";
            Text += i.ToString();

            //ListBoxSIPLog.Dispatcher.Invoke(new Action(delegate
            //{
            //    ListBoxSIPLog.Items.Add(Text);
            //}));


            return 0;
        }


        public Int32 onPresenceRecvSubscribe(Int32 callbackObject,
                                                    Int32 subscribeId,
                                                    String from,
                                                    String fromDisplayName,
                                                    String subject)
        {


            return 0;
        }


        public Int32 onPresenceOnline(Int32 callbackObject, String from, String fromDisplayName, String stateText)
        {

            return 0;
        }

        public Int32 onPresenceOffline(Int32 callbackObject, String from, String fromDisplayName)
        {


            return 0;
        }

        public Int32 onRecvOptions(Int32 callbackObject, StringBuilder optionsMessage)
        {
            /*
                        string text = "Received an OPTIONS message: ";
                        text += optionsMessage.ToString();
                        MessageBox.Show(text);
            */


            return 0;
        }

        public Int32 onRecvInfo(Int32 callbackObject, Int32 sessionId, StringBuilder infoMessage)
        {
            /*          
                      int i = 0;
                      bool state = false;
                      for (i = LINE_BASE; i < MAX_LINES; ++i)
                      {
                          if (_CallSessions[i].getSessionId() == sessionId)
                          {
                              state = true;
                              break;
                          }
                      }

                      if (state == false)
                      {
                          return 0;
                      }


                      string text = "Received a INFO message on line ";
                      text += i.ToString();
                      text += ": ";
                      text += infoMessage.ToString();

                      MessageBox.Show(text);
              */

            return 0;
        }


        public Int32 onRecvMessage(Int32 callbackObject, Int32 sessionId, StringBuilder message)
        {
            /*          
                      int i = 0;
                      bool state = false;
                      for (i = LINE_BASE; i < MAX_LINES; ++i)
                      {
                          if (_CallSessions[i].getSessionId() == sessionId)
                          {
                              state = true;
                              break;
                          }
                      }

                      if (state == false)
                      {
                          return 0;
                      }


                      string text = "Received a MESSAGE message on line ";
                      text += i.ToString();
                      text += ": ";
                      text += message.ToString();

                      MessageBox.Show(text);
              */

            return 0;
        }



        public Int32 onRecvBinaryMessage(Int32 callbackObject,
                                        Int32 sessionId,
                                        StringBuilder message,
                                        byte[] messageBody,
                                        Int32 length)
        {

            int i = 0;
            bool state = false;
            for (i = LINE_BASE; i < MAX_LINES; ++i)
            {
                if (_CallSessions[i].getSessionId() == sessionId)
                {
                    state = true;
                    break;
                }
            }

            if (state == false)
            {
                return 0;
            }


            string text = "Received a binary MESSAGE message on line ";
            text += i.ToString();


            MessageBox.Show(text, "Received a binary MESSAGE message");

            return 0;
        }


        public Int32 onRecvBinaryPagerMessage(Int32 callbackObject,
                                              StringBuilder from,
                                              StringBuilder fromDisplayName,
                                              byte[] messageBody,
                                              Int32 length)
        {
            string text = "Received a binary pager message(out of dialog) from ";
            text += from;

            MessageBox.Show(text, "Received a binary pager MESSAGE message");

            return 0;
        }



        public Int32 onReceivedRtpPacket(IntPtr callbackObject,
                                  Int32 sessionId,
                                  Boolean isAudio,
                                  byte[] RTPPacket,
                                  Int32 packetSize)
        {
            /*
    !!! IMPORTANT !!!

    Don’t call any PortSIP SDK API functions in here directly. If you want to call the PortSIP API functions or 
    other code which will spend long time, you should post a message to main thread(main window) or other thread,
    let the thread to call SDK API functions or other code.

*/

            return 0;
        }

        public Int32 onSendingRtpPacket(IntPtr callbackObject,
                                  Int32 sessionId,
                                  Boolean isAudio,
                                  byte[] RTPPacket,
                                  Int32 packetSize)
        {

            /*
    !!! IMPORTANT !!!

    Don’t call any PortSIP SDK API functions in here directly. If you want to call the PortSIP API functions or 
    other code which will spend long time, you should post a message to main thread(main window) or other thread,
    let the thread to call SDK API functions or other code.
            
*/
            
            return 0;
        }



        public Int32 onAudioRawCallback(IntPtr callbackObject,
                                           Int32 sessionId,
                                           Int32 callbackType,
                                           [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 4)] byte[] data,
                                           Int32 dataLength,
                                           Int32 samplingFreqHz)
        {


            /*
                !!! IMPORTANT !!!

                Don’t call any PortSIP SDK API functions in here directly. If you want to call the PortSIP API functions or 
                other code which will spend long time, you should post a message to main thread(main window) or other thread,
                let the thread to call SDK API functions or other code.

            */

            // The data parameter is audio stream as PCM format, 16bit, Mono.
            // the dataLength parameter is audio steam data length.




            //
            // IMPORTANT: the data length is stored in dataLength parameter!!!
            //

            AUDIOSTREAM_CALLBACK_MODE type = (AUDIOSTREAM_CALLBACK_MODE)callbackType;

            if (type == AUDIOSTREAM_CALLBACK_MODE.AUDIOSTREAM_LOCAL_MIX)
            {
                // The callback data is mixed from local record device - microphone
                // The sessionId is CALLBACK_SESSION_ID.PORTSIP_LOCAL_MIX_ID

            }
            else if (type == AUDIOSTREAM_CALLBACK_MODE.AUDIOSTREAM_REMOTE_MIX)
            {
                // The callback data is mixed from local record device - microphone
                // The sessionId is CALLBACK_SESSION_ID.PORTSIP_REMOTE_MIX_ID
            }
            else if (type == AUDIOSTREAM_CALLBACK_MODE.AUDIOSTREAM_LOCAL_PER_CHANNEL)
            {
                // The callback data is from local record device of each session, use the sessionId to identifying the session.
            }
            else if (type == AUDIOSTREAM_CALLBACK_MODE.AUDIOSTREAM_REMOTE_PER_CHANNEL)
            {
                // The callback data is received from remote side of each session, use the sessionId to identifying the session.
            }




            return 0;
        }

        public Int32 onVideoRawCallback(IntPtr callbackObject,
                                                Int32 sessionId,
                                                Int32 callbackType,
                                                Int32 width,
                                                Int32 height,
                                                [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 6)] byte[] data,
                                                Int32 dataLength)
        {
            /*
                !!! IMPORTANT !!!

                Don’t call any PortSIP SDK API functions in here directly. If you want to call the PortSIP API functions or 
                other code which will spend long time, you should post a message to main thread(main window) or other thread,
                let the thread to call SDK API functions or other code.

                The video data format is YUV420.
            */



            //
            // IMPORTANT: the data length is stored in dataLength parameter!!!
            //



            VIDEOSTREAM_CALLBACK_MODE type = (VIDEOSTREAM_CALLBACK_MODE)callbackType;

            if (type == VIDEOSTREAM_CALLBACK_MODE.VIDEOSTREAM_LOCAL)
            {

            }

            else if (type == VIDEOSTREAM_CALLBACK_MODE.VIDEOSTREAM_REMOTE)
            {

            }


            return 0;

        }


        public Int32 onPlayAviFileFinished(IntPtr callbackObject, Int32 sessionId)
        {
            // when the file is play finished, this callback event will be fired.

            /*
                !!! IMPORTANT !!!

                Don’t call any PortSIP SDK API functions in here directly. If you want to call the PortSIP API functions or 
                other code which will spend long time, you should post a message to main thread(main window) or other thread,
                let the thread to call SDK API functions or other code.

            */


            return 0;
        }


        public Int32 onPlayWaveFileFinished(IntPtr callbackObject, Int32 sessionId, String fileName)
        {
            // when the file is play finished, this callback event will be fired.

            /*
                !!! IMPORTANT !!!

                Don’t call any PortSIP SDK API functions in here directly. If you want to call the PortSIP API functions or 
                other code which will spend long time, you should post a message to main thread(main window) or other thread,
                let the thread to call SDK API functions or other code.

            */


            return 0;
        }

        private void Window_MouseDown(object sender, MouseButtonEventArgs e)
        {
            DragMove();
        }

        private void HelpMenuItem_Click(object sender, RoutedEventArgs e)
        {

        }

        private void AboutMenuItem_Click(object sender, RoutedEventArgs e)
        {

        }

        private void ExitMenuItem_Click(object sender, RoutedEventArgs e)
        {
            App.Current.Shutdown();
        }

        private void BtnMensaje_Click(object sender, RoutedEventArgs e)
        {

        }

        private void BtnAgenda_Click(object sender, RoutedEventArgs e)
        {

        }

        private void BtnLlamar_Click(object sender, RoutedEventArgs e)
        {
            if (_SIPInited == false || _SIPLogined == false)
            {
                return;
            }
            if (textBlockDialingNumber.Text.Length <= 0)
            {
                MessageBox.Show("El telefono esta vacio.");
                return;
            }

            if (_CallSessions[_CurrentlyLine].getSessionState() == true || _CallSessions[_CurrentlyLine].getRecvCallState() == true)
            {
                MessageBox.Show("Current line is busy now, please switch a line.");
                return;
            }


            string callTo = textBlockDialingNumber.Text;

            UpdateAudioCodecs();
            UpdateVideoCodecs();

            if (_core.isAudioCodecEmpty() == true)
            {
                InitDefaultAudioCodecs();
            }



            //  Usually for 3PCC need to make call without SDP

            Boolean hasSdp = true;
            //if (CheckBoxSDP.IsChecked == true)
            //{
            //    hasSdp = false;
            //}

         //   _core.setAudioDeviceId(ComboBoxMicrophones.SelectedIndex, ComboBoxSpeakers.SelectedIndex);

            int errorCode = 0;
            sessionId = _core.call(callTo, hasSdp, out errorCode);
            //if (errorCode != 0)
            //{
            //    ListBoxSIPLog.Items.Add("Call failed");
            //    return;
            //}

        //    _core.setRemoteVideoWindow(sessionId, remoteVideoWindow.Child.Handle);

            _CallSessions[_CurrentlyLine].setSessionId(sessionId);
            _CallSessions[_CurrentlyLine].setSessionState(true);

            string Text = "Line " + _CurrentlyLine.ToString();
            Text = Text + ": Calling...";
           // ListBoxSIPLog.Items.Add(Text);
        }

        private void BtnVideo_Click(object sender, RoutedEventArgs e)
        {
            //if (_PopUpVideo != null)
            //{
            //    _PopUpVideo = null;
            //}

            //_PopUpVideo = new PopUpControl();
            //if (_PopUpVideo != null)
            //{
            //    _PopUpVideo.Placement = System.Windows.Controls.Primitives.PlacementMode.Left;
            //    _PopUpVideo.PlacementTarget = this;
            //    _PopUpVideo.AreAnimationsEnabled = true;
            //    _PopUpVideo.IsOpen = true;
            //}
            Point poi = new Point();
            poi.X = this.RestoreBounds.X;
            poi.Y = this.RestoreBounds.Y;
            Popcontrol = new ControlVideo(_SIPInited, poi, ref _core, _CallSessions, _CurrentlyLine, sessionId);
          //  UpdatePosition();

            Popcontrol.DragMove();
          //  Popcontrol.UpdatePosition();
           //  _core.viewLocalVideo(true);
            Popcontrol.Show();
         
        }

        private void UpdatePosition()
        {
            this.Left = this.Left + this.ActualWidth;
            this.Top = this.Top;
        }

        private void _this_LocationChanged(object sender, EventArgs e)
        {
            Point poi = new Point();
            if (Popcontrol != null)
            {
                poi.X = this.RestoreBounds.X;
                poi.Y = this.RestoreBounds.Y;
                Popcontrol.UpdatePosition(poi);
            }
        }

        private void ButtonLocalVideo_Click_1(object sender, RoutedEventArgs e)
        {
            //if (_SIPInited == false)
            //{
            //    return;
            //}

            //string buttonContent = (string)ButtonLocalVideo.Content;
            //if (buttonContent == "video")
            //{
            //    _core.viewLocalVideo(true);
            //    ButtonLocalVideo.Content = "Stop Local";
            //}
            //else
            //{
            //    _core.viewLocalVideo(false);
            //    localVideoWindow.Child.Refresh();

            //    ButtonLocalVideo.Content = "Local Video";
            //}
        }

        private void tc_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void BtnMute_Click(object sender, RoutedEventArgs e)
        {

        }

       
    }
}
